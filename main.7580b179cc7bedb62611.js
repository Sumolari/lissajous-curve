!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){var i=n(1);"string"==typeof i&&(i=[[t.i,i,""]]);var r={insert:"head",singleton:!1};n(3)(i,r);i.locals&&(t.exports=i.locals)},function(t,e,n){(t.exports=n(2)(!1)).push([t.i,"body {\n  background: #2c2a2e;\n  margin: 0; }\n\n.app circle {\n  fill: none;\n  stroke-width: 2; }\n\n.app .dot-circle {\n  fill: #fff; }\n\n.app .lissajous-curve {\n  fill: none; }\n\n.app .stroke-red {\n  stroke: #ab5062; }\n\n.app .stroke-orange {\n  stroke: #af735c; }\n\n.app .stroke-yellow {\n  stroke: #d0d596; }\n\n.app .stroke-green {\n  stroke: #70b270; }\n\n.app .stroke-blue {\n  stroke: #5dbdcd; }\n\n.app .stroke-pink {\n  stroke: #bf6895; }\n\n.app .stroke-purple {\n  stroke: #9f88ce; }\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",i=t[3];if(!i)return n;if(e&&"function"==typeof btoa){var r=(f=i,o=btoa(unescape(encodeURIComponent(JSON.stringify(f)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(c," */")),a=i.sources.map(function(t){return"/*# sourceURL=".concat(i.sourceRoot).concat(t," */")});return[n].concat(a).concat([r]).join("\n")}var f,o,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2],"{").concat(n,"}"):n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},r=0;r<this.length;r++){var a=this[r][0];null!=a&&(i[a]=!0)}for(var f=0;f<t.length;f++){var o=t[f];null!=o[0]&&i[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="(".concat(o[2],") and (").concat(n,")")),e.push(o))}},e}},function(t,e,n){"use strict";var i,r={},a=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},f=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}();function o(t,e){for(var n=[],i={},r=0;r<t.length;r++){var a=t[r],f=e.base?a[0]+e.base:a[0],o={css:a[1],media:a[2],sourceMap:a[3]};i[f]?i[f].parts.push(o):n.push(i[f]={id:f,parts:[o]})}return n}function c(t,e){for(var n=0;n<t.length;n++){var i=t[n],a=r[i.id],f=0;if(a){for(a.refs++;f<a.parts.length;f++)a.parts[f](i.parts[f]);for(;f<i.parts.length;f++)a.parts.push(b(i.parts[f],e))}else{for(var o=[];f<i.parts.length;f++)o.push(b(i.parts[f],e));r[i.id]={id:i.id,refs:1,parts:o}}}}function s(t){var e=document.createElement("style");if(void 0===t.attributes.nonce){var i=n.nc;i&&(t.attributes.nonce=i)}if(Object.keys(t.attributes).forEach(function(n){e.setAttribute(n,t.attributes[n])}),"function"==typeof t.insert)t.insert(e);else{var r=f(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var u,h=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join("\n")});function l(t,e,n,i){var r=n?"":i.css;if(t.styleSheet)t.styleSheet.cssText=h(e,r);else{var a=document.createTextNode(r),f=t.childNodes;f[e]&&t.removeChild(f[e]),f.length?t.insertBefore(a,f[e]):t.appendChild(a)}}var d=null,_=0;function b(t,e){var n,i,r;if(e.singleton){var a=_++;n=d||(d=s(e)),i=l.bind(null,n,a,!1),r=l.bind(null,n,a,!0)}else n=s(e),i=function(t,e,n){var i=n.css,r=n.media,a=n.sourceMap;if(r&&t.setAttribute("media",r),a&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).attributes="object"==typeof e.attributes?e.attributes:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a());var n=o(t,e);return c(n,e),function(t){for(var i=[],a=0;a<n.length;a++){var f=n[a],s=r[f.id];s&&(s.refs--,i.push(s))}t&&c(o(t,e),e);for(var u=0;u<i.length;u++){var h=i[u];if(0===h.refs){for(var l=0;l<h.parts.length;l++)h.parts[l]();delete r[h.id]}}}}},function(t,e,n){"use strict";n.r(e);n(0);var i=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},r=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return i(e(t),n)}),{left:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)<0?i=a+1:r=a}return i},right:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)>0?r=a:i=a+1}return i}}};var a=r(i);a.right,a.left;var f=Array.prototype;f.slice,f.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var o=function(t){for(var e,n,i,r=t.length,a=-1,f=0;++a<r;)f+=t[a].length;for(n=new Array(f);--r>=0;)for(e=(i=t[r]).length;--e>=0;)n[--f]=i[e];return n};Array.prototype.slice;var c={value:function(){}};function s(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+"")||t in i)throw new Error("illegal type: "+t);i[t]=[]}return new u(i)}function u(t){this._=t}function h(t,e){return t.trim().split(/^|\s+/).map(function(t){var n="",i=t.indexOf(".");if(i>=0&&(n=t.slice(i+1),t=t.slice(0,i)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}function l(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function d(t,e,n){for(var i=0,r=t.length;i<r;++i)if(t[i].name===e){t[i]=c,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=n&&t.push({name:e,value:n}),t}u.prototype=s.prototype={constructor:u,on:function(t,e){var n,i=this._,r=h(t+"",i),a=-1,f=r.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<f;)if(n=(t=r[a]).type)i[n]=d(i[n],t.name,e);else if(null==e)for(n in i)i[n]=d(i[n],t.name,null);return this}for(;++a<f;)if((n=(t=r[a]).type)&&(n=l(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new u(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),a=0;a<n;++a)r[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(i=this._[t]).length;a<n;++a)i[a].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,a=i.length;r<a;++r)i[r].value.apply(e,n)}};var _=s,b="http://www.w3.org/1999/xhtml",p={svg:"http://www.w3.org/2000/svg",xhtml:b,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},y=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),p.hasOwnProperty(e)?{space:p[e],local:t}:t};var v=function(t){var e=y(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===b&&e.documentElement.namespaceURI===b?e.createElement(t):e.createElementNS(n,t)}})(e)};function g(){}var x=function(t){return null==t?g:function(){return this.querySelector(t)}};function m(){return[]}var w=function(t){return null==t?m:function(){return this.querySelectorAll(t)}},M=function(t){return function(){return this.matches(t)}},C=function(t){return new Array(t.length)};function N(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}N.prototype={constructor:N,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var T="$";function k(t,e,n,i,r,a){for(var f,o=0,c=e.length,s=a.length;o<s;++o)(f=e[o])?(f.__data__=a[o],i[o]=f):n[o]=new N(t,a[o]);for(;o<c;++o)(f=e[o])&&(r[o]=f)}function A(t,e,n,i,r,a,f){var o,c,s,u={},h=e.length,l=a.length,d=new Array(h);for(o=0;o<h;++o)(c=e[o])&&(d[o]=s=T+f.call(c,c.__data__,o,e),s in u?r[o]=c:u[s]=c);for(o=0;o<l;++o)(c=u[s=T+f.call(t,a[o],o,a)])?(i[o]=c,c.__data__=a[o],u[s]=null):n[o]=new N(t,a[o]);for(o=0;o<h;++o)(c=e[o])&&u[d[o]]===c&&(r[o]=c)}function S(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function E(t){return function(){this.removeAttribute(t)}}function U(t){return function(){this.removeAttributeNS(t.space,t.local)}}function P(t,e){return function(){this.setAttribute(t,e)}}function D(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function L(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function R(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var Y=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function j(t){return function(){this.style.removeProperty(t)}}function F(t,e,n){return function(){this.style.setProperty(t,e,n)}}function O(t,e,n){return function(){var i=e.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,n)}}function q(t,e){return t.style.getPropertyValue(e)||Y(t).getComputedStyle(t,null).getPropertyValue(e)}function H(t){return function(){delete this[t]}}function X(t,e){return function(){this[t]=e}}function z(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function I(t){return t.trim().split(/^|\s+/)}function $(t){return t.classList||new B(t)}function B(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function Z(t,e){for(var n=$(t),i=-1,r=e.length;++i<r;)n.add(e[i])}function W(t,e){for(var n=$(t),i=-1,r=e.length;++i<r;)n.remove(e[i])}function V(t){return function(){Z(this,t)}}function J(t){return function(){W(this,t)}}function Q(t,e){return function(){(e.apply(this,arguments)?Z:W)(this,t)}}B.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function G(){this.textContent=""}function K(t){return function(){this.textContent=t}}function tt(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function et(){this.innerHTML=""}function nt(t){return function(){this.innerHTML=t}}function it(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function rt(){this.nextSibling&&this.parentNode.appendChild(this)}function at(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ft(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function ct(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function st(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var ut={},ht=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ut={mouseenter:"mouseover",mouseleave:"mouseout"}));function lt(t,e,n){return t=dt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function dt(t,e,n){return function(i){var r=ht;ht=i;try{t.call(this,this.__data__,e,n)}finally{ht=r}}}function _t(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}function bt(t){return function(){var e=this.__on;if(e){for(var n,i=0,r=-1,a=e.length;i<a;++i)n=e[i],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function pt(t,e,n){var i=ut.hasOwnProperty(t.type)?lt:dt;return function(r,a,f){var o,c=this.__on,s=i(e,a,f);if(c)for(var u=0,h=c.length;u<h;++u)if((o=c[u]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=s,o.capture=n),void(o.value=e);this.addEventListener(t.type,s,n),o={type:t.type,name:t.name,value:e,listener:s,capture:n},c?c.push(o):this.__on=[o]}}function yt(t,e,n){var i=Y(t),r=i.CustomEvent;"function"==typeof r?r=new r(e,n):(r=i.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}var vt=[null];function gt(t,e){this._groups=t,this._parents=e}function xt(){return new gt([[document.documentElement]],vt)}gt.prototype=xt.prototype={constructor:gt,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var a,f,o=e[r],c=o.length,s=i[r]=new Array(c),u=0;u<c;++u)(a=o[u])&&(f=t.call(a,a.__data__,u,o))&&("__data__"in a&&(f.__data__=a.__data__),s[u]=f);return new gt(i,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=w(t));for(var e=this._groups,n=e.length,i=[],r=[],a=0;a<n;++a)for(var f,o=e[a],c=o.length,s=0;s<c;++s)(f=o[s])&&(i.push(t.call(f,f.__data__,s,o)),r.push(f));return new gt(i,r)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var a,f=e[r],o=f.length,c=i[r]=[],s=0;s<o;++s)(a=f[s])&&t.call(a,a.__data__,s,f)&&c.push(a);return new gt(i,this._parents)},data:function(t,e){if(!t)return _=new Array(this.size()),u=-1,this.each(function(t){_[++u]=t}),_;var n,i=e?A:k,r=this._parents,a=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var f=a.length,o=new Array(f),c=new Array(f),s=new Array(f),u=0;u<f;++u){var h=r[u],l=a[u],d=l.length,_=t.call(h,h&&h.__data__,u,r),b=_.length,p=c[u]=new Array(b),y=o[u]=new Array(b);i(h,l,p,y,s[u]=new Array(d),_,e);for(var v,g,x=0,m=0;x<b;++x)if(v=p[x]){for(x>=m&&(m=x+1);!(g=y[m])&&++m<b;);v._next=g||null}}return(o=new gt(o,r))._enter=c,o._exit=s,o},enter:function(){return new gt(this._enter||this._groups.map(C),this._parents)},exit:function(){return new gt(this._exit||this._groups.map(C),this._parents)},join:function(t,e,n){var i=this.enter(),r=this,a=this.exit();return i="function"==typeof t?t(i):i.append(t+""),null!=e&&(r=e(r)),null==n?a.remove():n(a),i&&r?i.merge(r).order():r},merge:function(t){for(var e=this._groups,n=t._groups,i=e.length,r=n.length,a=Math.min(i,r),f=new Array(i),o=0;o<a;++o)for(var c,s=e[o],u=n[o],h=s.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=s[d]||u[d])&&(l[d]=c);for(;o<i;++o)f[o]=e[o];return new gt(f,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var i,r=t[e],a=r.length-1,f=r[a];--a>=0;)(i=r[a])&&(f&&4^i.compareDocumentPosition(f)&&f.parentNode.insertBefore(i,f),f=i);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=S);for(var n=this._groups,i=n.length,r=new Array(i),a=0;a<i;++a){for(var f,o=n[a],c=o.length,s=r[a]=new Array(c),u=0;u<c;++u)(f=o[u])&&(s[u]=f);s.sort(e)}return new gt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i=t[e],r=0,a=i.length;r<a;++r){var f=i[r];if(f)return f}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,i=e.length;n<i;++n)for(var r,a=e[n],f=0,o=a.length;f<o;++f)(r=a[f])&&t.call(r,r.__data__,f,a);return this},attr:function(t,e){var n=y(t);if(arguments.length<2){var i=this.node();return n.local?i.getAttributeNS(n.space,n.local):i.getAttribute(n)}return this.each((null==e?n.local?U:E:"function"==typeof e?n.local?R:L:n.local?D:P)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?j:"function"==typeof e?O:F)(t,e,null==n?"":n)):q(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?H:"function"==typeof e?z:X)(t,e)):this.node()[t]},classed:function(t,e){var n=I(t+"");if(arguments.length<2){for(var i=$(this.node()),r=-1,a=n.length;++r<a;)if(!i.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?Q:e?V:J)(n,e))},text:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?tt:K)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?et:("function"==typeof t?it:nt)(t)):this.node().innerHTML},raise:function(){return this.each(rt)},lower:function(){return this.each(at)},append:function(t){var e="function"==typeof t?t:v(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:v(t),i=null==e?ft:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),i.apply(this,arguments)||null)})},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?st:ct)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var i,r,a=_t(t+""),f=a.length;if(!(arguments.length<2)){for(o=e?pt:bt,null==n&&(n=!1),i=0;i<f;++i)this.each(o(a[i],e,n));return this}var o=this.node().__on;if(o)for(var c,s=0,u=o.length;s<u;++s)for(i=0,c=o[s];i<f;++i)if((r=a[i]).type===c.type&&r.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return yt(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return yt(this,t,e)}})(t,e))}};var mt=xt,wt=function(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],vt)},Mt=0;function Ct(){this._="@"+(++Mt).toString(36)}Ct.prototype=function(){return new Ct}.prototype={constructor:Ct,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function Nt(t,e,n,i,r,a,f,o,c,s){this.target=t,this.type=e,this.subject=n,this.identifier=i,this.active=r,this.x=a,this.y=f,this.dx=o,this.dy=c,this._=s}Nt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Tt=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function kt(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function At(){}var St="\\s*([+-]?\\d+)\\s*",Et="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ut="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Pt=/^#([0-9a-f]{3})$/,Dt=/^#([0-9a-f]{6})$/,Lt=new RegExp("^rgb\\("+[St,St,St]+"\\)$"),Rt=new RegExp("^rgb\\("+[Ut,Ut,Ut]+"\\)$"),Yt=new RegExp("^rgba\\("+[St,St,St,Et]+"\\)$"),jt=new RegExp("^rgba\\("+[Ut,Ut,Ut,Et]+"\\)$"),Ft=new RegExp("^hsl\\("+[Et,Ut,Ut]+"\\)$"),Ot=new RegExp("^hsla\\("+[Et,Ut,Ut,Et]+"\\)$"),qt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ht(){return this.rgb().formatHex()}function Xt(){return this.rgb().formatRgb()}function zt(t){var e;return t=(t+"").trim().toLowerCase(),(e=Pt.exec(t))?new Wt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Dt.exec(t))?It(parseInt(e[1],16)):(e=Lt.exec(t))?new Wt(e[1],e[2],e[3],1):(e=Rt.exec(t))?new Wt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Yt.exec(t))?$t(e[1],e[2],e[3],e[4]):(e=jt.exec(t))?$t(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Ft.exec(t))?Gt(e[1],e[2]/100,e[3]/100,1):(e=Ot.exec(t))?Gt(e[1],e[2]/100,e[3]/100,e[4]):qt.hasOwnProperty(t)?It(qt[t]):"transparent"===t?new Wt(NaN,NaN,NaN,0):null}function It(t){return new Wt(t>>16&255,t>>8&255,255&t,1)}function $t(t,e,n,i){return i<=0&&(t=e=n=NaN),new Wt(t,e,n,i)}function Bt(t){return t instanceof At||(t=zt(t)),t?new Wt((t=t.rgb()).r,t.g,t.b,t.opacity):new Wt}function Zt(t,e,n,i){return 1===arguments.length?Bt(t):new Wt(t,e,n,null==i?1:i)}function Wt(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function Vt(){return"#"+Qt(this.r)+Qt(this.g)+Qt(this.b)}function Jt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Qt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Gt(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ee(t,e,n,i)}function Kt(t){if(t instanceof ee)return new ee(t.h,t.s,t.l,t.opacity);if(t instanceof At||(t=zt(t)),!t)return new ee;if(t instanceof ee)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,r=Math.min(e,n,i),a=Math.max(e,n,i),f=NaN,o=a-r,c=(a+r)/2;return o?(f=e===a?(n-i)/o+6*(n<i):n===a?(i-e)/o+2:(e-n)/o+4,o/=c<.5?a+r:2-a-r,f*=60):o=c>0&&c<1?0:f,new ee(f,o,c,t.opacity)}function te(t,e,n,i){return 1===arguments.length?Kt(t):new ee(t,e,n,null==i?1:i)}function ee(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function ne(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Tt(At,zt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Ht,formatHex:Ht,formatHsl:function(){return Kt(this).formatHsl()},formatRgb:Xt,toString:Xt}),Tt(Wt,Zt,kt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Wt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Wt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Vt,formatHex:Vt,formatRgb:Jt,toString:Jt})),Tt(ee,te,kt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ee(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ee(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new Wt(ne(t>=240?t-240:t+120,r,i),ne(t,r,i),ne(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var ie=Math.PI/180,re=180/Math.PI,ae=.96422,fe=1,oe=.82521,ce=4/29,se=6/29,ue=3*se*se,he=se*se*se;function le(t){if(t instanceof _e)return new _e(t.l,t.a,t.b,t.opacity);if(t instanceof me)return we(t);t instanceof Wt||(t=Bt(t));var e,n,i=ve(t.r),r=ve(t.g),a=ve(t.b),f=be((.2225045*i+.7168786*r+.0606169*a)/fe);return i===r&&r===a?e=n=f:(e=be((.4360747*i+.3850649*r+.1430804*a)/ae),n=be((.0139322*i+.0971045*r+.7141733*a)/oe)),new _e(116*f-16,500*(e-f),200*(f-n),t.opacity)}function de(t,e,n,i){return 1===arguments.length?le(t):new _e(t,e,n,null==i?1:i)}function _e(t,e,n,i){this.l=+t,this.a=+e,this.b=+n,this.opacity=+i}function be(t){return t>he?Math.pow(t,1/3):t/ue+ce}function pe(t){return t>se?t*t*t:ue*(t-ce)}function ye(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function ve(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ge(t){if(t instanceof me)return new me(t.h,t.c,t.l,t.opacity);if(t instanceof _e||(t=le(t)),0===t.a&&0===t.b)return new me(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*re;return new me(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function xe(t,e,n,i){return 1===arguments.length?ge(t):new me(t,e,n,null==i?1:i)}function me(t,e,n,i){this.h=+t,this.c=+e,this.l=+n,this.opacity=+i}function we(t){if(isNaN(t.h))return new _e(t.l,0,0,t.opacity);var e=t.h*ie;return new _e(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}Tt(_e,de,kt(At,{brighter:function(t){return new _e(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new _e(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Wt(ye(3.1338561*(e=ae*pe(e))-1.6168667*(t=fe*pe(t))-.4906146*(n=oe*pe(n))),ye(-.9787684*e+1.9161415*t+.033454*n),ye(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Tt(me,xe,kt(At,{brighter:function(t){return new me(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new me(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return we(this).rgb()}}));var Me=-.29227,Ce=-.90649,Ne=1.97294,Te=Ne*Ce,ke=1.78277*Ne,Ae=1.78277*Me- -.14861*Ce;function Se(t,e,n,i){return 1===arguments.length?function(t){if(t instanceof Ee)return new Ee(t.h,t.s,t.l,t.opacity);t instanceof Wt||(t=Bt(t));var e=t.r/255,n=t.g/255,i=t.b/255,r=(Ae*i+Te*e-ke*n)/(Ae+Te-ke),a=i-r,f=(Ne*(n-r)-Me*a)/Ce,o=Math.sqrt(f*f+a*a)/(Ne*r*(1-r)),c=o?Math.atan2(f,a)*re-120:NaN;return new Ee(c<0?c+360:c,o,r,t.opacity)}(t):new Ee(t,e,n,null==i?1:i)}function Ee(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function Ue(t,e,n,i,r){var a=t*t,f=a*t;return((1-3*t+3*a-f)*e+(4-6*a+3*f)*n+(1+3*t+3*a-3*f)*i+f*r)/6}Tt(Ee,Se,kt(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ee(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ee(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ie,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),i=Math.cos(t),r=Math.sin(t);return new Wt(255*(e+n*(-.14861*i+1.78277*r)),255*(e+n*(Me*i+Ce*r)),255*(e+n*(Ne*i)),this.opacity)}}));var Pe=function(t){return function(){return t}};function De(t,e){return function(n){return t+n*e}}function Le(t,e){var n=e-t;return n?De(t,n>180||n<-180?n-360*Math.round(n/360):n):Pe(isNaN(t)?e:t)}function Re(t){return 1==(t=+t)?Ye:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}}(e,n,t):Pe(isNaN(e)?n:e)}}function Ye(t,e){var n=e-t;return n?De(t,n):Pe(isNaN(t)?e:t)}var je=function t(e){var n=Re(e);function i(t,e){var i=n((t=Zt(t)).r,(e=Zt(e)).r),r=n(t.g,e.g),a=n(t.b,e.b),f=Ye(t.opacity,e.opacity);return function(e){return t.r=i(e),t.g=r(e),t.b=a(e),t.opacity=f(e),t+""}}return i.gamma=t,i}(1);function Fe(t){return function(e){var n,i,r=e.length,a=new Array(r),f=new Array(r),o=new Array(r);for(n=0;n<r;++n)i=Zt(e[n]),a[n]=i.r||0,f[n]=i.g||0,o[n]=i.b||0;return a=t(a),f=t(f),o=t(o),i.opacity=1,function(t){return i.r=a(t),i.g=f(t),i.b=o(t),i+""}}}var Oe=Fe(function(t){var e=t.length-1;return function(n){var i=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[i],a=t[i+1],f=i>0?t[i-1]:2*r-a,o=i<e-1?t[i+2]:2*a-r;return Ue((n-i/e)*e,f,r,a,o)}}),qe=(Fe(function(t){var e=t.length;return function(n){var i=Math.floor(((n%=1)<0?++n:n)*e),r=t[(i+e-1)%e],a=t[i%e],f=t[(i+1)%e],o=t[(i+2)%e];return Ue((n-i/e)*e,r,a,f,o)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),He=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Xe=new RegExp(He.source,"g");var ze,Ie,$e,Be,Ze=function(t,e){var n,i,r,a=He.lastIndex=Xe.lastIndex=0,f=-1,o=[],c=[];for(t+="",e+="";(n=He.exec(t))&&(i=Xe.exec(e));)(r=i.index)>a&&(r=e.slice(a,r),o[f]?o[f]+=r:o[++f]=r),(n=n[0])===(i=i[0])?o[f]?o[f]+=i:o[++f]=i:(o[++f]=null,c.push({i:f,x:qe(n,i)})),a=Xe.lastIndex;return a<e.length&&(r=e.slice(a),o[f]?o[f]+=r:o[++f]=r),o.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,i=0;i<e;++i)o[(n=c[i]).i]=n.x(t);return o.join("")})},We=180/Math.PI,Ve={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Je=function(t,e,n,i,r,a){var f,o,c;return(f=Math.sqrt(t*t+e*e))&&(t/=f,e/=f),(c=t*n+e*i)&&(n-=t*c,i-=e*c),(o=Math.sqrt(n*n+i*i))&&(n/=o,i/=o,c/=o),t*i<e*n&&(t=-t,e=-e,c=-c,f=-f),{translateX:r,translateY:a,rotate:Math.atan2(e,t)*We,skewX:Math.atan(c)*We,scaleX:f,scaleY:o}};function Qe(t,e,n,i){function r(t){return t.length?t.pop()+" ":""}return function(a,f){var o=[],c=[];return a=t(a),f=t(f),function(t,i,r,a,f,o){if(t!==r||i!==a){var c=f.push("translate(",null,e,null,n);o.push({i:c-4,x:qe(t,r)},{i:c-2,x:qe(i,a)})}else(r||a)&&f.push("translate("+r+e+a+n)}(a.translateX,a.translateY,f.translateX,f.translateY,o,c),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(r(n)+"rotate(",null,i)-2,x:qe(t,e)})):e&&n.push(r(n)+"rotate("+e+i)}(a.rotate,f.rotate,o,c),function(t,e,n,a){t!==e?a.push({i:n.push(r(n)+"skewX(",null,i)-2,x:qe(t,e)}):e&&n.push(r(n)+"skewX("+e+i)}(a.skewX,f.skewX,o,c),function(t,e,n,i,a,f){if(t!==n||e!==i){var o=a.push(r(a)+"scale(",null,",",null,")");f.push({i:o-4,x:qe(t,n)},{i:o-2,x:qe(e,i)})}else 1===n&&1===i||a.push(r(a)+"scale("+n+","+i+")")}(a.scaleX,a.scaleY,f.scaleX,f.scaleY,o,c),a=f=null,function(t){for(var e,n=-1,i=c.length;++n<i;)o[(e=c[n]).i]=e.x(t);return o.join("")}}}var Ge=Qe(function(t){return"none"===t?Ve:(ze||(ze=document.createElement("DIV"),Ie=document.documentElement,$e=document.defaultView),ze.style.transform=t,t=$e.getComputedStyle(Ie.appendChild(ze),null).getPropertyValue("transform"),Ie.removeChild(ze),t=t.slice(7,-1).split(","),Je(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Ke=Qe(function(t){return null==t?Ve:(Be||(Be=document.createElementNS("http://www.w3.org/2000/svg","g")),Be.setAttribute("transform",t),(t=Be.transform.baseVal.consolidate())?(t=t.matrix,Je(t.a,t.b,t.c,t.d,t.e,t.f)):Ve)},", ",")",")");Math.SQRT2;function tn(t){return function(e,n){var i=t((e=te(e)).h,(n=te(n)).h),r=Ye(e.s,n.s),a=Ye(e.l,n.l),f=Ye(e.opacity,n.opacity);return function(t){return e.h=i(t),e.s=r(t),e.l=a(t),e.opacity=f(t),e+""}}}tn(Le),tn(Ye);function en(t){return function(e,n){var i=t((e=xe(e)).h,(n=xe(n)).h),r=Ye(e.c,n.c),a=Ye(e.l,n.l),f=Ye(e.opacity,n.opacity);return function(t){return e.h=i(t),e.c=r(t),e.l=a(t),e.opacity=f(t),e+""}}}en(Le),en(Ye);function nn(t){return function e(n){function i(e,i){var r=t((e=Se(e)).h,(i=Se(i)).h),a=Ye(e.s,i.s),f=Ye(e.l,i.l),o=Ye(e.opacity,i.opacity);return function(t){return e.h=r(t),e.s=a(t),e.l=f(Math.pow(t,n)),e.opacity=o(t),e+""}}return n=+n,i.gamma=e,i}(1)}nn(Le);var rn=nn(Ye);var an,fn,on=0,cn=0,sn=0,un=1e3,hn=0,ln=0,dn=0,_n="object"==typeof performance&&performance.now?performance:Date,bn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function pn(){return ln||(bn(yn),ln=_n.now()+dn)}function yn(){ln=0}function vn(){this._call=this._time=this._next=null}function gn(t,e,n){var i=new vn;return i.restart(t,e,n),i}function xn(){ln=(hn=_n.now())+dn,on=cn=0;try{!function(){pn(),++on;for(var t,e=an;e;)(t=ln-e._time)>=0&&e._call.call(null,t),e=e._next;--on}()}finally{on=0,function(){var t,e,n=an,i=1/0;for(;n;)n._call?(i>n._time&&(i=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:an=e);fn=t,wn(i)}(),ln=0}}function mn(){var t=_n.now(),e=t-hn;e>un&&(dn-=e,hn=t)}function wn(t){on||(cn&&(cn=clearTimeout(cn)),t-ln>24?(t<1/0&&(cn=setTimeout(xn,t-_n.now()-dn)),sn&&(sn=clearInterval(sn))):(sn||(hn=_n.now(),sn=setInterval(mn,un)),on=1,bn(xn)))}vn.prototype=gn.prototype={constructor:vn,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?pn():+n)+(null==e?0:+e),this._next||fn===this||(fn?fn._next=this:an=this,fn=this),this._call=t,this._time=n,wn()},stop:function(){this._call&&(this._call=null,this._time=1/0,wn())}};var Mn=function(t,e,n){var i=new vn;return e=null==e?0:+e,i.restart(function(n){i.stop(),t(n+e)},e,n),i},Cn=_("start","end","cancel","interrupt"),Nn=[],Tn=0,kn=1,An=2,Sn=3,En=4,Un=5,Pn=6,Dn=function(t,e,n,i,r,a){var f=t.__transition;if(f){if(n in f)return}else t.__transition={};!function(t,e,n){var i,r=t.__transition;function a(c){var s,u,h,l;if(n.state!==kn)return o();for(s in r)if((l=r[s]).name===n.name){if(l.state===Sn)return Mn(a);l.state===En?(l.state=Pn,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete r[s]):+s<e&&(l.state=Pn,l.timer.stop(),l.on.call("cancel",t,t.__data__,l.index,l.group),delete r[s])}if(Mn(function(){n.state===Sn&&(n.state=En,n.timer.restart(f,n.delay,n.time),f(c))}),n.state=An,n.on.call("start",t,t.__data__,n.index,n.group),n.state===An){for(n.state=Sn,i=new Array(h=n.tween.length),s=0,u=-1;s<h;++s)(l=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(i[++u]=l);i.length=u+1}}function f(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(o),n.state=Un,1),a=-1,f=i.length;++a<f;)i[a].call(t,r);n.state===Un&&(n.on.call("end",t,t.__data__,n.index,n.group),o())}function o(){for(var i in n.state=Pn,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=gn(function(t){n.state=kn,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)},0,n.time)}(t,n,{name:e,index:i,group:r,on:Cn,tween:Nn,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:Tn})};function Ln(t,e){var n=Yn(t,e);if(n.state>Tn)throw new Error("too late; already scheduled");return n}function Rn(t,e){var n=Yn(t,e);if(n.state>Sn)throw new Error("too late; already running");return n}function Yn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var jn=function(t,e){var n,i,r,a=t.__transition,f=!0;if(a){for(r in e=null==e?null:e+"",a)(n=a[r]).name===e?(i=n.state>An&&n.state<Un,n.state=Pn,n.timer.stop(),n.on.call(i?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete a[r]):f=!1;f&&delete t.__transition}};function Fn(t,e){var n,i;return function(){var r=Rn(this,t),a=r.tween;if(a!==n)for(var f=0,o=(i=n=a).length;f<o;++f)if(i[f].name===e){(i=i.slice()).splice(f,1);break}r.tween=i}}function On(t,e,n){var i,r;if("function"!=typeof n)throw new Error;return function(){var a=Rn(this,t),f=a.tween;if(f!==i){r=(i=f).slice();for(var o={name:e,value:n},c=0,s=r.length;c<s;++c)if(r[c].name===e){r[c]=o;break}c===s&&r.push(o)}a.tween=r}}function qn(t,e,n){var i=t._id;return t.each(function(){var t=Rn(this,i);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Yn(t,i).value[e]}}var Hn=function(t,e){var n;return("number"==typeof e?qe:e instanceof zt?je:(n=zt(e))?(e=n,je):Ze)(t,e)};function Xn(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,r)),n}return r._value=e,r}function zn(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,r)),n}return r._value=e,r}function In(t,e){return function(){Ln(this,t).delay=+e.apply(this,arguments)}}function $n(t,e){return e=+e,function(){Ln(this,t).delay=e}}function Bn(t,e){return function(){Rn(this,t).duration=+e.apply(this,arguments)}}function Zn(t,e){return e=+e,function(){Rn(this,t).duration=e}}function Wn(t,e){if("function"!=typeof e)throw new Error;return function(){Rn(this,t).ease=e}}function Vn(t,e,n){var i,r,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Ln:Rn;return function(){var f=a(this,t),o=f.on;o!==i&&(r=(i=o).copy()).on(e,n),f.on=r}}var Jn=mt.prototype.constructor;function Qn(t){return function(){this.style.removeProperty(t)}}function Gn(t,e,n){var i,r;function a(){var a=e.apply(this,arguments);return a!==r&&(i=(r=a)&&function(t,e,n){return function(i){this.style.setProperty(t,e(i),n)}}(t,a,n)),i}return a._value=e,a}var Kn=0;function ti(t,e,n,i){this._groups=t,this._parents=e,this._name=n,this._id=i}function ei(){return++Kn}var ni=mt.prototype;ti.prototype=function(t){return mt().transition(t)}.prototype={constructor:ti,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=x(t));for(var i=this._groups,r=i.length,a=new Array(r),f=0;f<r;++f)for(var o,c,s=i[f],u=s.length,h=a[f]=new Array(u),l=0;l<u;++l)(o=s[l])&&(c=t.call(o,o.__data__,l,s))&&("__data__"in o&&(c.__data__=o.__data__),h[l]=c,Dn(h[l],e,n,l,h,Yn(o,n)));return new ti(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=w(t));for(var i=this._groups,r=i.length,a=[],f=[],o=0;o<r;++o)for(var c,s=i[o],u=s.length,h=0;h<u;++h)if(c=s[h]){for(var l,d=t.call(c,c.__data__,h,s),_=Yn(c,n),b=0,p=d.length;b<p;++b)(l=d[b])&&Dn(l,e,n,b,d,_);a.push(d),f.push(c)}return new ti(a,f,e,n)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var a,f=e[r],o=f.length,c=i[r]=[],s=0;s<o;++s)(a=f[s])&&t.call(a,a.__data__,s,f)&&c.push(a);return new ti(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,i=e.length,r=n.length,a=Math.min(i,r),f=new Array(i),o=0;o<a;++o)for(var c,s=e[o],u=n[o],h=s.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=s[d]||u[d])&&(l[d]=c);for(;o<i;++o)f[o]=e[o];return new ti(f,this._parents,this._name,this._id)},selection:function(){return new Jn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=ei(),i=this._groups,r=i.length,a=0;a<r;++a)for(var f,o=i[a],c=o.length,s=0;s<c;++s)if(f=o[s]){var u=Yn(f,e);Dn(f,t,n,s,o,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new ti(i,this._parents,t,n)},call:ni.call,nodes:ni.nodes,node:ni.node,size:ni.size,empty:ni.empty,each:ni.each,on:function(t,e){var n=this._id;return arguments.length<2?Yn(this.node(),n).on.on(t):this.each(Vn(n,t,e))},attr:function(t,e){var n=y(t),i="transform"===n?Ke:Hn;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var i,r,a;return function(){var f,o,c=n(this);if(null!=c)return(f=this.getAttributeNS(t.space,t.local))===(o=c+"")?null:f===i&&o===r?a:(r=o,a=e(i=f,c));this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var i,r,a;return function(){var f,o,c=n(this);if(null!=c)return(f=this.getAttribute(t))===(o=c+"")?null:f===i&&o===r?a:(r=o,a=e(i=f,c));this.removeAttribute(t)}})(n,i,qn(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var i,r,a=n+"";return function(){var f=this.getAttributeNS(t.space,t.local);return f===a?null:f===i?r:r=e(i=f,n)}}:function(t,e,n){var i,r,a=n+"";return function(){var f=this.getAttribute(t);return f===a?null:f===i?r:r=e(i=f,n)}})(n,i,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var i=y(t);return this.tween(n,(i.local?Xn:zn)(i,e))},style:function(t,e,n){var i="transform"==(t+="")?Ge:Hn;return null==e?this.styleTween(t,function(t,e){var n,i,r;return function(){var a=q(this,t),f=(this.style.removeProperty(t),q(this,t));return a===f?null:a===n&&f===i?r:r=e(n=a,i=f)}}(t,i)).on("end.style."+t,Qn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var i,r,a;return function(){var f=q(this,t),o=n(this),c=o+"";return null==o&&(this.style.removeProperty(t),c=o=q(this,t)),f===c?null:f===i&&c===r?a:(r=c,a=e(i=f,o))}}(t,i,qn(this,"style."+t,e))).each(function(t,e){var n,i,r,a,f="style."+e,o="end."+f;return function(){var c=Rn(this,t),s=c.on,u=null==c.value[f]?a||(a=Qn(e)):void 0;s===n&&r===u||(i=(n=s).copy()).on(o,r=u),c.on=i}}(this._id,t)):this.styleTween(t,function(t,e,n){var i,r,a=n+"";return function(){var f=q(this,t);return f===a?null:f===i?r:r=e(i=f,n)}}(t,i,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==e)return this.tween(i,null);if("function"!=typeof e)throw new Error;return this.tween(i,Gn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(qn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var i,r=Yn(this.node(),n).tween,a=0,f=r.length;a<f;++a)if((i=r[a]).name===t)return i.value;return null}return this.each((null==e?Fn:On)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?In:$n)(e,t)):Yn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Bn:Zn)(e,t)):Yn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Wn(e,t)):Yn(this.node(),e).ease},end:function(){var t,e,n=this,i=n._id,r=n.size();return new Promise(function(a,f){var o={value:f},c={value:function(){0==--r&&a()}};n.each(function(){var n=Rn(this,i),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(o),e._.interrupt.push(o),e._.end.push(c)),n.on=e})})}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var ii=2*Math.PI,ri=(function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=ii);function r(t){return e*Math.pow(2,10*--t)*Math.sin((i-t)/n)}return r.amplitude=function(e){return t(e,n*ii)},r.period=function(n){return t(e,n)},r}(1,.3),function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=ii);function r(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/n)}return r.amplitude=function(e){return t(e,n*ii)},r.period=function(n){return t(e,n)},r}(1,.3),function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=ii);function r(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((i-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((i+t)/n))/2}return r.amplitude=function(e){return t(e,n*ii)},r.period=function(n){return t(e,n)},r}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function ai(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return ri.time=pn(),ri;return n}mt.prototype.interrupt=function(t){return this.each(function(){jn(this,t)})},mt.prototype.transition=function(t){var e,n;t instanceof ti?(e=t._id,t=t._name):(e=ei(),(n=ri).time=pn(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,a=0;a<r;++a)for(var f,o=i[a],c=o.length,s=0;s<c;++s)(f=o[s])&&Dn(f,t,e,s,o,n||ai(f,e));return new ti(i,this._parents,t,e)};function fi(t){return[+t[0],+t[1]]}function oi(t){return[fi(t[0]),fi(t[1])]}["w","e"].map(ci),["n","s"].map(ci),["nw","n","ne","w","e","sw","s","se"].map(ci);function ci(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var si=Math.PI,ui=2*si,hi=ui-1e-6;function li(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function di(){return new li}li.prototype=di.prototype={constructor:li,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,i){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+i)},bezierCurveTo:function(t,e,n,i,r,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +i+","+(this._x1=+r)+","+(this._y1=+a)},arcTo:function(t,e,n,i,r){t=+t,e=+e,n=+n,i=+i,r=+r;var a=this._x1,f=this._y1,o=n-t,c=i-e,s=a-t,u=f-e,h=s*s+u*u;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(u*o-c*s)>1e-6&&r){var l=n-a,d=i-f,_=o*o+c*c,b=l*l+d*d,p=Math.sqrt(_),y=Math.sqrt(h),v=r*Math.tan((si-Math.acos((_+h-b)/(2*p*y)))/2),g=v/y,x=v/p;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*s)+","+(e+g*u)),this._+="A"+r+","+r+",0,0,"+ +(u*l>s*d)+","+(this._x1=t+x*o)+","+(this._y1=e+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,i,r,a){t=+t,e=+e,a=!!a;var f=(n=+n)*Math.cos(i),o=n*Math.sin(i),c=t+f,s=e+o,u=1^a,h=a?i-r:r-i;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),n&&(h<0&&(h=h%ui+ui),h>hi?this._+="A"+n+","+n+",0,1,"+u+","+(t-f)+","+(e-o)+"A"+n+","+n+",0,1,"+u+","+(this._x1=c)+","+(this._y1=s):h>1e-6&&(this._+="A"+n+","+n+",0,"+ +(h>=si)+","+u+","+(this._x1=t+n*Math.cos(r))+","+(this._y1=e+n*Math.sin(r))))},rect:function(t,e,n,i){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +i+"h"+-n+"Z"},toString:function(){return this._}};function _i(){}function bi(t,e){var n=new _i;if(t instanceof _i)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var i,r=-1,a=t.length;if(null==e)for(;++r<a;)n.set(r,t[r]);else for(;++r<a;)n.set(e(i=t[r],r,t),i)}else if(t)for(var f in t)n.set(f,t[f]);return n}_i.prototype=bi.prototype={constructor:_i,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var pi=bi;function yi(){}var vi=pi.prototype;function gi(t,e){var n=new yi;if(t instanceof yi)t.each(function(t){n.add(t)});else if(t){var i=-1,r=t.length;if(null==e)for(;++i<r;)n.add(t[i]);else for(;++i<r;)n.add(e(t[i],i,t))}return n}yi.prototype=gi.prototype={constructor:yi,has:vi.has,add:function(t){return this["$"+(t+="")]=t,this},remove:vi.remove,clear:vi.clear,values:vi.keys,size:vi.size,empty:vi.empty,each:vi.each};Array.prototype.slice;var xi={},mi={},wi=34,Mi=10,Ci=13;function Ni(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function Ti(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var i in t)i in e||n.push(e[i]=i)}),n}function ki(t,e){var n=t+"",i=n.length;return i<e?new Array(e-i+1).join(0)+n:n}function Ai(t){var e,n=t.getUTCHours(),i=t.getUTCMinutes(),r=t.getUTCSeconds(),a=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+ki(-e,6):e>9999?"+"+ki(e,6):ki(e,4))+"-"+ki(t.getUTCMonth()+1,2)+"-"+ki(t.getUTCDate(),2)+(a?"T"+ki(n,2)+":"+ki(i,2)+":"+ki(r,2)+"."+ki(a,3)+"Z":r?"T"+ki(n,2)+":"+ki(i,2)+":"+ki(r,2)+"Z":i||n?"T"+ki(n,2)+":"+ki(i,2)+"Z":"")}var Si=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function i(t,e){var i,r=[],a=t.length,f=0,o=0,c=a<=0,s=!1;function u(){if(c)return mi;if(s)return s=!1,xi;var e,i,r=f;if(t.charCodeAt(r)===wi){for(;f++<a&&t.charCodeAt(f)!==wi||t.charCodeAt(++f)===wi;);return(e=f)>=a?c=!0:(i=t.charCodeAt(f++))===Mi?s=!0:i===Ci&&(s=!0,t.charCodeAt(f)===Mi&&++f),t.slice(r+1,e-1).replace(/""/g,'"')}for(;f<a;){if((i=t.charCodeAt(e=f++))===Mi)s=!0;else if(i===Ci)s=!0,t.charCodeAt(f)===Mi&&++f;else if(i!==n)continue;return t.slice(r,e)}return c=!0,t.slice(r,a)}for(t.charCodeAt(a-1)===Mi&&--a,t.charCodeAt(a-1)===Ci&&--a;(i=u())!==mi;){for(var h=[];i!==xi&&i!==mi;)h.push(i),i=u();e&&null==(h=e(h,o++))||r.push(h)}return r}function r(e,n){return e.map(function(e){return n.map(function(t){return f(e[t])}).join(t)})}function a(e){return e.map(f).join(t)}function f(t){return null==t?"":t instanceof Date?Ai(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,a=i(t,function(t,i){if(n)return n(t,i-1);r=t,n=e?function(t,e){var n=Ni(t);return function(i,r){return e(n(i),r,t)}}(t,e):Ni(t)});return a.columns=r||[],a},parseRows:i,format:function(e,n){return null==n&&(n=Ti(e)),[n.map(f).join(t)].concat(r(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=Ti(t)),r(t,e).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}},Ei=Si(","),Ui=Ei.parse,Pi=(Ei.parseRows,Ei.format,Ei.formatBody,Ei.formatRows,Si("\t")),Di=Pi.parse;Pi.parseRows,Pi.format,Pi.formatBody,Pi.formatRows;function Li(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Ri=function(t,e){return fetch(t,e).then(Li)};function Yi(t){return function(e,n,i){return 2===arguments.length&&"function"==typeof n&&(i=n,n=void 0),Ri(e,n).then(function(e){return t(e,i)})}}Yi(Ui),Yi(Di);function ji(t){return function(e,n){return Ri(e,n).then(function(e){return(new DOMParser).parseFromString(e,t)})}}ji("application/xml"),ji("text/html"),ji("image/svg+xml");function Fi(t,e,n,i){if(isNaN(e)||isNaN(n))return t;var r,a,f,o,c,s,u,h,l,d=t._root,_={data:i},b=t._x0,p=t._y0,y=t._x1,v=t._y1;if(!d)return t._root=_,t;for(;d.length;)if((s=e>=(a=(b+y)/2))?b=a:y=a,(u=n>=(f=(p+v)/2))?p=f:v=f,r=d,!(d=d[h=u<<1|s]))return r[h]=_,t;if(o=+t._x.call(null,d.data),c=+t._y.call(null,d.data),e===o&&n===c)return _.next=d,r?r[h]=_:t._root=_,t;do{r=r?r[h]=new Array(4):t._root=new Array(4),(s=e>=(a=(b+y)/2))?b=a:y=a,(u=n>=(f=(p+v)/2))?p=f:v=f}while((h=u<<1|s)==(l=(c>=f)<<1|o>=a));return r[l]=d,r[h]=_,t}var Oi=function(t,e,n,i,r){this.node=t,this.x0=e,this.y0=n,this.x1=i,this.y1=r};function qi(t){return t[0]}function Hi(t){return t[1]}function Xi(t,e,n){var i=new zi(null==e?qi:e,null==n?Hi:n,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function zi(t,e,n,i,r,a){this._x=t,this._y=e,this._x0=n,this._y0=i,this._x1=r,this._y1=a,this._root=void 0}function Ii(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var $i=Xi.prototype=zi.prototype;$i.copy=function(){var t,e,n=new zi(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return n;if(!i.length)return n._root=Ii(i),n;for(t=[{source:i,target:n._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(e=i.source[r])&&(e.length?t.push({source:e,target:i.target[r]=new Array(4)}):i.target[r]=Ii(e));return n},$i.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return Fi(this.cover(e,n),e,n,t)},$i.addAll=function(t){var e,n,i,r,a=t.length,f=new Array(a),o=new Array(a),c=1/0,s=1/0,u=-1/0,h=-1/0;for(n=0;n<a;++n)isNaN(i=+this._x.call(null,e=t[n]))||isNaN(r=+this._y.call(null,e))||(f[n]=i,o[n]=r,i<c&&(c=i),i>u&&(u=i),r<s&&(s=r),r>h&&(h=r));if(c>u||s>h)return this;for(this.cover(c,s).cover(u,h),n=0;n<a;++n)Fi(this,f[n],o[n],t[n]);return this},$i.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,i=this._y0,r=this._x1,a=this._y1;if(isNaN(n))r=(n=Math.floor(t))+1,a=(i=Math.floor(e))+1;else{for(var f,o,c=r-n,s=this._root;n>t||t>=r||i>e||e>=a;)switch(o=(e<i)<<1|t<n,(f=new Array(4))[o]=s,s=f,c*=2,o){case 0:r=n+c,a=i+c;break;case 1:n=r-c,a=i+c;break;case 2:r=n+c,i=a-c;break;case 3:n=r-c,i=a-c}this._root&&this._root.length&&(this._root=s)}return this._x0=n,this._y0=i,this._x1=r,this._y1=a,this},$i.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},$i.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},$i.find=function(t,e,n){var i,r,a,f,o,c,s,u=this._x0,h=this._y0,l=this._x1,d=this._y1,_=[],b=this._root;for(b&&_.push(new Oi(b,u,h,l,d)),null==n?n=1/0:(u=t-n,h=e-n,l=t+n,d=e+n,n*=n);c=_.pop();)if(!(!(b=c.node)||(r=c.x0)>l||(a=c.y0)>d||(f=c.x1)<u||(o=c.y1)<h))if(b.length){var p=(r+f)/2,y=(a+o)/2;_.push(new Oi(b[3],p,y,f,o),new Oi(b[2],r,y,p,o),new Oi(b[1],p,a,f,y),new Oi(b[0],r,a,p,y)),(s=(e>=y)<<1|t>=p)&&(c=_[_.length-1],_[_.length-1]=_[_.length-1-s],_[_.length-1-s]=c)}else{var v=t-+this._x.call(null,b.data),g=e-+this._y.call(null,b.data),x=v*v+g*g;if(x<n){var m=Math.sqrt(n=x);u=t-m,h=e-m,l=t+m,d=e+m,i=b.data}}return i},$i.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(f=+this._y.call(null,t)))return this;var e,n,i,r,a,f,o,c,s,u,h,l,d=this._root,_=this._x0,b=this._y0,p=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((s=a>=(o=(_+p)/2))?_=o:p=o,(u=f>=(c=(b+y)/2))?b=c:y=c,e=d,!(d=d[h=u<<1|s]))return this;if(!d.length)break;(e[h+1&3]||e[h+2&3]||e[h+3&3])&&(n=e,l=h)}for(;d.data!==t;)if(i=d,!(d=d.next))return this;return(r=d.next)&&delete d.next,i?(r?i.next=r:delete i.next,this):e?(r?e[h]=r:delete e[h],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(n?n[l]=d:this._root=d),this):(this._root=r,this)},$i.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},$i.root=function(){return this._root},$i.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},$i.visit=function(t){var e,n,i,r,a,f,o=[],c=this._root;for(c&&o.push(new Oi(c,this._x0,this._y0,this._x1,this._y1));e=o.pop();)if(!t(c=e.node,i=e.x0,r=e.y0,a=e.x1,f=e.y1)&&c.length){var s=(i+a)/2,u=(r+f)/2;(n=c[3])&&o.push(new Oi(n,s,u,a,f)),(n=c[2])&&o.push(new Oi(n,i,u,s,f)),(n=c[1])&&o.push(new Oi(n,s,r,a,u)),(n=c[0])&&o.push(new Oi(n,i,r,s,u))}return this},$i.visitAfter=function(t){var e,n=[],i=[];for(this._root&&n.push(new Oi(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var r=e.node;if(r.length){var a,f=e.x0,o=e.y0,c=e.x1,s=e.y1,u=(f+c)/2,h=(o+s)/2;(a=r[0])&&n.push(new Oi(a,f,o,u,h)),(a=r[1])&&n.push(new Oi(a,u,o,c,h)),(a=r[2])&&n.push(new Oi(a,f,h,u,s)),(a=r[3])&&n.push(new Oi(a,u,h,c,s))}i.push(e)}for(;e=i.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},$i.x=function(t){return arguments.length?(this._x=t,this):this._x},$i.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Bi=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,i=t.slice(0,n);return[i.length>1?i[0]+i.slice(2):i,+t.slice(n+1)]},Zi=function(t){return(t=Bi(Math.abs(t)))?t[1]:NaN},Wi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Vi(t){return new Ji(t)}function Ji(t){if(!(e=Wi.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}Vi.prototype=Ji.prototype,Ji.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Qi,Gi,Ki=function(t){t:for(var e,n=t.length,i=1,r=-1;i<n;++i)switch(t[i]){case".":r=e=i;break;case"0":0===r&&(r=i),e=i;break;default:if(r>0){if(!+t[i])break t;r=0}}return r>0?t.slice(0,r)+t.slice(e+1):t},tr=function(t,e){var n=Bi(t,e);if(!n)return t+"";var i=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")},er={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return tr(100*t,e)},r:tr,s:function(t,e){var n=Bi(t,e);if(!n)return t+"";var i=n[0],r=n[1],a=r-(Qi=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,f=i.length;return a===f?i:a>f?i+new Array(a-f+1).join("0"):a>0?i.slice(0,a)+"."+i.slice(a):"0."+new Array(1-a).join("0")+Bi(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},nr=function(t){return t},ir=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Gi=function(t){var e,n,i=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,i){for(var r=t.length,a=[],f=0,o=e[0],c=0;r>0&&o>0&&(c+o+1>i&&(o=Math.max(1,i-c)),a.push(t.substring(r-=o,r+o)),!((c+=o+1)>i));)o=e[f=(f+1)%e.length];return a.reverse().join(n)}):nr,r=t.currency,a=t.decimal,f=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):nr,o=t.percent||"%";function c(t){var e=(t=Vi(t)).fill,n=t.align,c=t.sign,s=t.symbol,u=t.zero,h=t.width,l=t.comma,d=t.precision,_=t.trim,b=t.type;"n"===b?(l=!0,b="g"):er[b]||(null==d&&(d=12),_=!0,b="g"),(u||"0"===e&&"="===n)&&(u=!0,e="0",n="=");var p="$"===s?r[0]:"#"===s&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",y="$"===s?r[1]:/[%p]/.test(b)?o:"",v=er[b],g=/[defgprs%]/.test(b);function x(t){var r,o,s,x=p,m=y;if("c"===b)m=v(t)+m,t="";else{var w=(t=+t)<0;if(t=v(Math.abs(t),d),_&&(t=Ki(t)),w&&0==+t&&(w=!1),x=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+x,m=("s"===b?ir[8+Qi/3]:"")+m+(w&&"("===c?")":""),g)for(r=-1,o=t.length;++r<o;)if(48>(s=t.charCodeAt(r))||s>57){m=(46===s?a+t.slice(r+1):t.slice(r))+m,t=t.slice(0,r);break}}l&&!u&&(t=i(t,1/0));var M=x.length+t.length+m.length,C=M<h?new Array(h-M+1).join(e):"";switch(l&&u&&(t=i(C+t,C.length?h-m.length:1/0),C=""),n){case"<":t=x+t+m+C;break;case"=":t=x+C+t+m;break;case"^":t=C.slice(0,M=C.length>>1)+x+t+m+C.slice(M);break;default:t=C+x+t+m}return f(t)}return d=null==d?6:/[gprs]/.test(b)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,e){var n=c(((t=Vi(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Zi(e)/3))),r=Math.pow(10,-i),a=ir[8+i/3];return function(t){return n(r*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Gi.format,Gi.formatPrefix;var rr=function(){return new ar};function ar(){this.reset()}ar.prototype={constructor:ar,reset:function(){this.s=this.t=0},add:function(t){or(fr,t,this.t),or(this,fr.s,this.s),this.s?this.t+=fr.t:this.s=fr.t},valueOf:function(){return this.s}};var fr=new ar;function or(t,e,n){var i=t.s=e+n,r=i-e,a=i-r;t.t=e-a+(n-r)}var cr=1e-6,sr=1e-12,ur=Math.PI,hr=ur/2,lr=ur/4,dr=2*ur,_r=ur/180,br=Math.abs,pr=Math.atan,yr=Math.atan2,vr=Math.cos,gr=(Math.ceil,Math.exp),xr=(Math.floor,Math.log),mr=(Math.pow,Math.sin),wr=Math.sign||function(t){return t>0?1:t<0?-1:0},Mr=Math.sqrt,Cr=Math.tan;function Nr(t){return t>1?0:t<-1?ur:Math.acos(t)}function Tr(t){return t>1?hr:t<-1?-hr:Math.asin(t)}function kr(){}rr(),rr();function Ar(t){var e=t[0],n=t[1],i=vr(n);return[i*vr(e),i*mr(e),mr(n)]}function Sr(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Er(t){var e=Mr(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}rr();function Ur(t,e){return[br(t)>ur?t+Math.round(-t/dr)*dr:t,e]}Ur.invert=Ur;var Pr=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:kr,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},Dr=function(t,e){return br(t[0]-e[0])<cr&&br(t[1]-e[1])<cr};function Lr(t,e,n,i){this.x=t,this.z=e,this.o=n,this.e=i,this.v=!1,this.n=this.p=null}var Rr=function(t,e,n,i,r){var a,f,o=[],c=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,i=t[0],f=t[e];if(Dr(i,f)){for(r.lineStart(),a=0;a<e;++a)r.point((i=t[a])[0],i[1]);r.lineEnd()}else o.push(n=new Lr(i,t,null,!0)),c.push(n.o=new Lr(i,null,n,!1)),o.push(n=new Lr(f,t,null,!1)),c.push(n.o=new Lr(f,null,n,!0))}}),o.length){for(c.sort(e),Yr(o),Yr(c),a=0,f=c.length;a<f;++a)c[a].e=n=!n;for(var s,u,h=o[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;s=l.z,r.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(a=0,f=s.length;a<f;++a)r.point((u=s[a])[0],u[1]);else i(l.x,l.n.x,1,r);l=l.n}else{if(d)for(s=l.p.z,a=s.length-1;a>=0;--a)r.point((u=s[a])[0],u[1]);else i(l.x,l.p.x,-1,r);l=l.p}s=(l=l.o).z,d=!d}while(!l.v);r.lineEnd()}}};function Yr(t){if(e=t.length){for(var e,n,i=0,r=t[0];++i<e;)r.n=n=t[i],n.p=r,r=n;r.n=n=t[0],n.p=r}}var jr=rr();function Fr(t){return br(t[0])<=ur?t[0]:wr(t[0])*((br(t[0])+ur)%dr-ur)}var Or=function(t,e){var n=Fr(e),i=e[1],r=mr(i),a=[mr(n),-vr(n),0],f=0,o=0;jr.reset(),1===r?i=hr+cr:-1===r&&(i=-hr-cr);for(var c=0,s=t.length;c<s;++c)if(h=(u=t[c]).length)for(var u,h,l=u[h-1],d=Fr(l),_=l[1]/2+lr,b=mr(_),p=vr(_),y=0;y<h;++y,d=g,b=m,p=w,l=v){var v=u[y],g=Fr(v),x=v[1]/2+lr,m=mr(x),w=vr(x),M=g-d,C=M>=0?1:-1,N=C*M,T=N>ur,k=b*m;if(jr.add(yr(k*C*mr(N),p*w+k*vr(N))),f+=T?M+C*dr:M,T^d>=n^g>=n){var A=Sr(Ar(l),Ar(v));Er(A);var S=Sr(a,A);Er(S);var E=(T^M>=0?-1:1)*Tr(S[2]);(i>E||i===E&&(A[0]||A[1]))&&(o+=T^M>=0?1:-1)}}return(f<-cr||f<cr&&jr<-cr)^1&o},qr=function(t,e,n,i){return function(r){var a,f,c,s=e(r),u=Pr(),h=e(u),l=!1,d={point:_,lineStart:p,lineEnd:y,polygonStart:function(){d.point=v,d.lineStart=g,d.lineEnd=x,f=[],a=[]},polygonEnd:function(){d.point=_,d.lineStart=p,d.lineEnd=y,f=o(f);var t=Or(a,i);f.length?(l||(r.polygonStart(),l=!0),Rr(f,Xr,t,n,r)):t&&(l||(r.polygonStart(),l=!0),r.lineStart(),n(null,null,1,r),r.lineEnd()),l&&(r.polygonEnd(),l=!1),f=a=null},sphere:function(){r.polygonStart(),r.lineStart(),n(null,null,1,r),r.lineEnd(),r.polygonEnd()}};function _(e,n){t(e,n)&&r.point(e,n)}function b(t,e){s.point(t,e)}function p(){d.point=b,s.lineStart()}function y(){d.point=_,s.lineEnd()}function v(t,e){c.push([t,e]),h.point(t,e)}function g(){h.lineStart(),c=[]}function x(){v(c[0][0],c[0][1]),h.lineEnd();var t,e,n,i,o=h.clean(),s=u.result(),d=s.length;if(c.pop(),a.push(c),c=null,d)if(1&o){if((e=(n=s[0]).length-1)>0){for(l||(r.polygonStart(),l=!0),r.lineStart(),t=0;t<e;++t)r.point((i=n[t])[0],i[1]);r.lineEnd()}}else d>1&&2&o&&s.push(s.pop().concat(s.shift())),f.push(s.filter(Hr))}return d}};function Hr(t){return t.length>1}function Xr(t,e){return((t=t.x)[0]<0?t[1]-hr-cr:hr-t[1])-((e=e.x)[0]<0?e[1]-hr-cr:hr-e[1])}qr(function(){return!0},function(t){var e,n=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(a,f){var o=a>0?ur:-ur,c=br(a-n);br(c-ur)<cr?(t.point(n,i=(i+f)/2>0?hr:-hr),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(o,i),t.point(a,i),e=0):r!==o&&c>=ur&&(br(n-r)<cr&&(n-=r*cr),br(a-o)<cr&&(a-=o*cr),i=function(t,e,n,i){var r,a,f=mr(t-n);return br(f)>cr?pr((mr(e)*(a=vr(i))*mr(n)-mr(i)*(r=vr(e))*mr(t))/(r*a*f)):(e+i)/2}(n,i,a,f),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(o,i),e=0),t.point(n=a,i=f),r=o},lineEnd:function(){t.lineEnd(),n=i=NaN},clean:function(){return 2-e}}},function(t,e,n,i){var r;if(null==t)r=n*hr,i.point(-ur,r),i.point(0,r),i.point(ur,r),i.point(ur,0),i.point(ur,-r),i.point(0,-r),i.point(-ur,-r),i.point(-ur,0),i.point(-ur,r);else if(br(t[0]-e[0])>cr){var a=t[0]<e[0]?ur:-ur;r=n*a/2,i.point(-a,r),i.point(0,r),i.point(a,r)}else i.point(e[0],e[1])},[-ur,-hr]);rr();rr(),rr();function zr(t){this._context=t}zr.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,dr)}},result:kr};rr();function Ir(){this._string=[]}function $r(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Ir.prototype={_radius:4.5,_circle:$r(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=$r(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function Br(t){return function(e){var n=new Zr;for(var i in t)n[i]=t[i];return n.stream=e,n}}function Zr(){}Zr.prototype={constructor:Zr,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};vr(30*_r);Br({point:function(t,e){this.stream.point(t*_r,e*_r)}});function Wr(t){return function(e,n){var i=vr(e),r=vr(n),a=t(i*r);return[a*r*mr(e),a*mr(n)]}}function Vr(t){return function(e,n){var i=Mr(e*e+n*n),r=t(i),a=mr(r),f=vr(r);return[yr(e*a,i*f),Tr(i&&n*a/i)]}}var Jr=Wr(function(t){return Mr(2/(1+t))});Jr.invert=Vr(function(t){return 2*Tr(t/2)});var Qr=Wr(function(t){return(t=Nr(t))&&t/mr(t)});Qr.invert=Vr(function(t){return t});function Gr(t,e){return[t,xr(Cr((hr+e)/2))]}Gr.invert=function(t,e){return[t,2*pr(gr(e))-hr]};function Kr(t,e){return[t,e]}Kr.invert=Kr;var ta=1.340264,ea=-.081106,na=893e-6,ia=.003796,ra=Mr(3)/2;function aa(t,e){var n=Tr(ra*mr(e)),i=n*n,r=i*i*i;return[t*vr(n)/(ra*(ta+3*ea*i+r*(7*na+9*ia*i))),n*(ta+ea*i+r*(na+ia*i))]}aa.invert=function(t,e){for(var n,i=e,r=i*i,a=r*r*r,f=0;f<12&&(a=(r=(i-=n=(i*(ta+ea*r+a*(na+ia*r))-e)/(ta+3*ea*r+a*(7*na+9*ia*r)))*i)*r*r,!(br(n)<sr));++f);return[ra*t*(ta+3*ea*r+a*(7*na+9*ia*r))/vr(i),Tr(mr(i)/ra)]};function fa(t,e){var n=vr(e),i=vr(t)*n;return[n*mr(t)/i,mr(e)/i]}fa.invert=Vr(pr);function oa(t,e){var n=e*e,i=n*n;return[t*(.8707-.131979*n+i*(i*(.003971*n-.001529*i)-.013791)),e*(1.007226+n*(.015085+i*(.028874*n-.044475-.005916*i)))]}oa.invert=function(t,e){var n,i=e,r=25;do{var a=i*i,f=a*a;i-=n=(i*(1.007226+a*(.015085+f*(.028874*a-.044475-.005916*f)))-e)/(1.007226+a*(.045255+f*(.259866*a-.311325-.005916*11*f)))}while(br(n)>cr&&--r>0);return[t/(.8707+(a=i*i)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),i]};function ca(t,e){return[vr(e)*mr(t),mr(e)]}ca.invert=Vr(Tr);function sa(t,e){var n=vr(e),i=1+vr(t)*n;return[n*mr(t)/i,mr(e)/i]}sa.invert=Vr(function(t){return 2*pr(t)});function ua(t,e){return[xr(Cr((hr+e)/2)),-t]}ua.invert=function(t,e){return[-e,2*pr(gr(t))-hr]};function ha(t){var e=0,n=t.children,i=n&&n.length;if(i)for(;--i>=0;)e+=n[i].value;else e=1;t.value=e}function la(t,e){var n,i,r,a,f,o=new pa(t),c=+t.value&&(o.value=t.value),s=[o];for(null==e&&(e=da);n=s.pop();)if(c&&(n.value=+n.data.value),(r=e(n.data))&&(f=r.length))for(n.children=new Array(f),a=f-1;a>=0;--a)s.push(i=n.children[a]=new pa(r[a])),i.parent=n,i.depth=n.depth+1;return o.eachBefore(ba)}function da(t){return t.children}function _a(t){t.data=t.data.data}function ba(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function pa(t){this.data=t,this.depth=this.height=0,this.parent=null}pa.prototype=la.prototype={constructor:pa,count:function(){return this.eachAfter(ha)},each:function(t){var e,n,i,r,a=this,f=[a];do{for(e=f.reverse(),f=[];a=e.pop();)if(t(a),n=a.children)for(i=0,r=n.length;i<r;++i)f.push(n[i])}while(f.length);return this},eachAfter:function(t){for(var e,n,i,r=this,a=[r],f=[];r=a.pop();)if(f.push(r),e=r.children)for(n=0,i=e.length;n<i;++n)a.push(e[n]);for(;r=f.pop();)t(r);return this},eachBefore:function(t){for(var e,n,i=this,r=[i];i=r.pop();)if(t(i),e=i.children)for(n=e.length-1;n>=0;--n)r.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,i=e.children,r=i&&i.length;--r>=0;)n+=i[r].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),i=e.ancestors(),r=null;t=n.pop(),e=i.pop();for(;t===e;)r=t,t=n.pop(),e=i.pop();return r}(e,t),i=[e];e!==n;)e=e.parent,i.push(e);for(var r=i.length;t!==n;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return la(this).eachBefore(_a)}};Array.prototype.slice;var ya=function(t,e,n,i,r){for(var a,f=t.children,o=-1,c=f.length,s=t.value&&(i-e)/t.value;++o<c;)(a=f[o]).y0=n,a.y1=r,a.x0=e,a.x1=e+=a.value*s};function va(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}va.prototype=Object.create(pa.prototype);var ga=function(t,e,n,i,r){for(var a,f=t.children,o=-1,c=f.length,s=t.value&&(r-n)/t.value;++o<c;)(a=f[o]).x0=e,a.x1=i,a.y0=n,a.y1=n+=a.value*s},xa=(1+Math.sqrt(5))/2;function ma(t,e,n,i,r,a){for(var f,o,c,s,u,h,l,d,_,b,p,y=[],v=e.children,g=0,x=0,m=v.length,w=e.value;g<m;){c=r-n,s=a-i;do{u=v[x++].value}while(!u&&x<m);for(h=l=u,p=u*u*(b=Math.max(s/c,c/s)/(w*t)),_=Math.max(l/p,p/h);x<m;++x){if(u+=o=v[x].value,o<h&&(h=o),o>l&&(l=o),p=u*u*b,(d=Math.max(l/p,p/h))>_){u-=o;break}_=d}y.push(f={value:u,dice:c<s,children:v.slice(g,x)}),f.dice?ya(f,n,i,r,w?i+=s*u/w:a):ga(f,n,i,w?n+=c*u/w:r,a),w-=u,g=x}return y}(function t(e){function n(t,n,i,r,a){ma(e,t,n,i,r,a)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(xa),function t(e){function n(t,n,i,r,a){if((f=t._squarify)&&f.ratio===e)for(var f,o,c,s,u,h=-1,l=f.length,d=t.value;++h<l;){for(c=(o=f[h]).children,s=o.value=0,u=c.length;s<u;++s)o.value+=c[s].value;o.dice?ya(o,n,i,r,i+=(a-i)*o.value/d):ga(o,n,i,n+=(r-n)*o.value/d,a),d-=o.value}else t._squarify=f=ma(e,t,n,i,r,a),f.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(xa);var wa=function(){return Math.random()},Ma=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(wa),function t(e){function n(t,n){var i,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var a;if(null!=i)a=i,i=null;else do{i=2*e()-1,a=2*e()-1,r=i*i+a*a}while(!r||r>1);return t+n*a*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}(wa)),Ca=(function t(e){function n(){var t=Ma.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(wa),function t(e){function n(t){return function(){for(var n=0,i=0;i<t;++i)n+=e();return n}}return n.source=t,n}(wa));(function t(e){function n(t){var n=Ca.source(e)(t);return function(){return n()/t}}return n.source=t,n})(wa),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(wa);var Na=Array.prototype;Na.map,Na.slice;var Ta=new Date,ka=new Date;function Aa(t,e,n,i){function r(e){return t(e=new Date(+e)),e}return r.floor=r,r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,i,a){var f,o=[];if(n=r.ceil(n),a=null==a?1:Math.floor(a),!(n<i&&a>0))return o;do{o.push(f=new Date(+n)),e(n,a),t(n)}while(f<n&&n<i);return o},r.filter=function(n){return Aa(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;e(t,-1),!n(t););else for(;--i>=0;)for(;e(t,1),!n(t););})},n&&(r.count=function(e,i){return Ta.setTime(+e),ka.setTime(+i),t(Ta),t(ka),Math.floor(n(Ta,ka))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?function(e){return i(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var Sa=Aa(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Sa.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Aa(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Sa:null};Sa.range;var Ea=6e4,Ua=6048e5,Pa=Aa(function(t){t.setTime(t-t.getMilliseconds())},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Da=(Pa.range,Aa(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,e){t.setTime(+t+e*Ea)},function(t,e){return(e-t)/Ea},function(t){return t.getMinutes()})),La=(Da.range,Aa(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Ea)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()})),Ra=(La.range,Aa(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Ea)/864e5},function(t){return t.getDate()-1})),Ya=Ra;Ra.range;function ja(t){return Aa(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Ea)/Ua})}var Fa=ja(0),Oa=ja(1),qa=ja(2),Ha=ja(3),Xa=ja(4),za=ja(5),Ia=ja(6),$a=(Fa.range,Oa.range,qa.range,Ha.range,Xa.range,za.range,Ia.range,Aa(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Ba=($a.range,Aa(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Ba.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Aa(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var Za=Ba,Wa=(Ba.range,Aa(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Ea)},function(t,e){return(e-t)/Ea},function(t){return t.getUTCMinutes()})),Va=(Wa.range,Aa(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()})),Ja=(Va.range,Aa(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1})),Qa=Ja;Ja.range;function Ga(t){return Aa(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/Ua})}var Ka=Ga(0),tf=Ga(1),ef=Ga(2),nf=Ga(3),rf=Ga(4),af=Ga(5),ff=Ga(6),of=(Ka.range,tf.range,ef.range,nf.range,rf.range,af.range,ff.range,Aa(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),cf=(of.range,Aa(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));cf.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Aa(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var sf=cf;cf.range;function uf(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function hf(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function lf(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var df,_f,bf,pf={"-":"",_:" ",0:"0"},yf=/^\s*\d+/,vf=/^%/,gf=/[\\^$*+?|[\]().{}]/g;function xf(t,e,n){var i=t<0?"-":"",r=(i?-t:t)+"",a=r.length;return i+(a<n?new Array(n-a+1).join(e)+r:r)}function mf(t){return t.replace(gf,"\\$&")}function wf(t){return new RegExp("^(?:"+t.map(mf).join("|")+")","i")}function Mf(t){for(var e={},n=-1,i=t.length;++n<i;)e[t[n].toLowerCase()]=n;return e}function Cf(t,e,n){var i=yf.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function Nf(t,e,n){var i=yf.exec(e.slice(n,n+1));return i?(t.u=+i[0],n+i[0].length):-1}function Tf(t,e,n){var i=yf.exec(e.slice(n,n+2));return i?(t.U=+i[0],n+i[0].length):-1}function kf(t,e,n){var i=yf.exec(e.slice(n,n+2));return i?(t.V=+i[0],n+i[0].length):-1}function Af(t,e,n){var i=yf.exec(e.slice(n,n+2));return i?(t.W=+i[0],n+i[0].length):-1}function Sf(t,e,n){var i=yf.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function Ef(t,e,n){var i=yf.exec(e.slice(n,n+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),n+i[0].length):-1}function Uf(t,e,n){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),n+i[0].length):-1}function Pf(t,e,n){var i=yf.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function Df(t,e,n){var i=yf.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function Lf(t,e,n){var i=yf.exec(e.slice(n,n+3));return i?(t.m=0,t.d=+i[0],n+i[0].length):-1}function Rf(t,e,n){var i=yf.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function Yf(t,e,n){var i=yf.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function jf(t,e,n){var i=yf.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function Ff(t,e,n){var i=yf.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function Of(t,e,n){var i=yf.exec(e.slice(n,n+6));return i?(t.L=Math.floor(i[0]/1e3),n+i[0].length):-1}function qf(t,e,n){var i=vf.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function Hf(t,e,n){var i=yf.exec(e.slice(n));return i?(t.Q=+i[0],n+i[0].length):-1}function Xf(t,e,n){var i=yf.exec(e.slice(n));return i?(t.Q=1e3*+i[0],n+i[0].length):-1}function zf(t,e){return xf(t.getDate(),e,2)}function If(t,e){return xf(t.getHours(),e,2)}function $f(t,e){return xf(t.getHours()%12||12,e,2)}function Bf(t,e){return xf(1+Ya.count(Za(t),t),e,3)}function Zf(t,e){return xf(t.getMilliseconds(),e,3)}function Wf(t,e){return Zf(t,e)+"000"}function Vf(t,e){return xf(t.getMonth()+1,e,2)}function Jf(t,e){return xf(t.getMinutes(),e,2)}function Qf(t,e){return xf(t.getSeconds(),e,2)}function Gf(t){var e=t.getDay();return 0===e?7:e}function Kf(t,e){return xf(Fa.count(Za(t),t),e,2)}function to(t,e){var n=t.getDay();return t=n>=4||0===n?Xa(t):Xa.ceil(t),xf(Xa.count(Za(t),t)+(4===Za(t).getDay()),e,2)}function eo(t){return t.getDay()}function no(t,e){return xf(Oa.count(Za(t),t),e,2)}function io(t,e){return xf(t.getFullYear()%100,e,2)}function ro(t,e){return xf(t.getFullYear()%1e4,e,4)}function ao(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+xf(e/60|0,"0",2)+xf(e%60,"0",2)}function fo(t,e){return xf(t.getUTCDate(),e,2)}function oo(t,e){return xf(t.getUTCHours(),e,2)}function co(t,e){return xf(t.getUTCHours()%12||12,e,2)}function so(t,e){return xf(1+Qa.count(sf(t),t),e,3)}function uo(t,e){return xf(t.getUTCMilliseconds(),e,3)}function ho(t,e){return uo(t,e)+"000"}function lo(t,e){return xf(t.getUTCMonth()+1,e,2)}function _o(t,e){return xf(t.getUTCMinutes(),e,2)}function bo(t,e){return xf(t.getUTCSeconds(),e,2)}function po(t){var e=t.getUTCDay();return 0===e?7:e}function yo(t,e){return xf(Ka.count(sf(t),t),e,2)}function vo(t,e){var n=t.getUTCDay();return t=n>=4||0===n?rf(t):rf.ceil(t),xf(rf.count(sf(t),t)+(4===sf(t).getUTCDay()),e,2)}function go(t){return t.getUTCDay()}function xo(t,e){return xf(tf.count(sf(t),t),e,2)}function mo(t,e){return xf(t.getUTCFullYear()%100,e,2)}function wo(t,e){return xf(t.getUTCFullYear()%1e4,e,4)}function Mo(){return"+0000"}function Co(){return"%"}function No(t){return+t}function To(t){return Math.floor(+t/1e3)}!function(t){df=function(t){var e=t.dateTime,n=t.date,i=t.time,r=t.periods,a=t.days,f=t.shortDays,o=t.months,c=t.shortMonths,s=wf(r),u=Mf(r),h=wf(a),l=Mf(a),d=wf(f),_=Mf(f),b=wf(o),p=Mf(o),y=wf(c),v=Mf(c),g={a:function(t){return f[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:zf,e:zf,f:Wf,H:If,I:$f,j:Bf,L:Zf,m:Vf,M:Jf,p:function(t){return r[+(t.getHours()>=12)]},Q:No,s:To,S:Qf,u:Gf,U:Kf,V:to,w:eo,W:no,x:null,X:null,y:io,Y:ro,Z:ao,"%":Co},x={a:function(t){return f[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:fo,e:fo,f:ho,H:oo,I:co,j:so,L:uo,m:lo,M:_o,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:No,s:To,S:bo,u:po,U:yo,V:vo,w:go,W:xo,x:null,X:null,y:mo,Y:wo,Z:Mo,"%":Co},m={a:function(t,e,n){var i=d.exec(e.slice(n));return i?(t.w=_[i[0].toLowerCase()],n+i[0].length):-1},A:function(t,e,n){var i=h.exec(e.slice(n));return i?(t.w=l[i[0].toLowerCase()],n+i[0].length):-1},b:function(t,e,n){var i=y.exec(e.slice(n));return i?(t.m=v[i[0].toLowerCase()],n+i[0].length):-1},B:function(t,e,n){var i=b.exec(e.slice(n));return i?(t.m=p[i[0].toLowerCase()],n+i[0].length):-1},c:function(t,n,i){return C(t,e,n,i)},d:Df,e:Df,f:Of,H:Rf,I:Rf,j:Lf,L:Ff,m:Pf,M:Yf,p:function(t,e,n){var i=s.exec(e.slice(n));return i?(t.p=u[i[0].toLowerCase()],n+i[0].length):-1},Q:Hf,s:Xf,S:jf,u:Nf,U:Tf,V:kf,w:Cf,W:Af,x:function(t,e,i){return C(t,n,e,i)},X:function(t,e,n){return C(t,i,e,n)},y:Ef,Y:Sf,Z:Uf,"%":qf};function w(t,e){return function(n){var i,r,a,f=[],o=-1,c=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++o<s;)37===t.charCodeAt(o)&&(f.push(t.slice(c,o)),null!=(r=pf[i=t.charAt(++o)])?i=t.charAt(++o):r="e"===i?" ":"0",(a=e[i])&&(i=a(n,r)),f.push(i),c=o+1);return f.push(t.slice(c,o)),f.join("")}}function M(t,e){return function(n){var i,r,a=lf(1900);if(C(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(r=(i=hf(lf(a.y))).getUTCDay(),i=r>4||0===r?tf.ceil(i):tf(i),i=Qa.offset(i,7*(a.V-1)),a.y=i.getUTCFullYear(),a.m=i.getUTCMonth(),a.d=i.getUTCDate()+(a.w+6)%7):(r=(i=e(lf(a.y))).getDay(),i=r>4||0===r?Oa.ceil(i):Oa(i),i=Ya.offset(i,7*(a.V-1)),a.y=i.getFullYear(),a.m=i.getMonth(),a.d=i.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),r="Z"in a?hf(lf(a.y)).getUTCDay():e(lf(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(r+5)%7:a.w+7*a.U-(r+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,hf(a)):e(a)}}function C(t,e,n,i){for(var r,a,f=0,o=e.length,c=n.length;f<o;){if(i>=c)return-1;if(37===(r=e.charCodeAt(f++))){if(r=e.charAt(f++),!(a=m[r in pf?e.charAt(f++):r])||(i=a(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}return g.x=w(n,g),g.X=w(i,g),g.c=w(e,g),x.x=w(n,x),x.X=w(i,x),x.c=w(e,x),{format:function(t){var e=w(t+="",g);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",uf);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,hf);return e.toString=function(){return t},e}}}(t),df.format,df.parse,_f=df.utcFormat,bf=df.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||_f("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||bf("%Y-%m-%dT%H:%M:%S.%LZ");var ko=function(t){for(var e=t.length/6|0,n=new Array(e),i=0;i<e;)n[i]="#"+t.slice(6*i,6*++i);return n},Ao=(ko("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),ko("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),ko("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),ko("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),ko("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),ko("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),ko("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),ko("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),ko("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return Oe(t[t.length-1])});Ao(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(ko)),Ao(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(ko)),Ao(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(ko)),Ao(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(ko)),Ao(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(ko)),Ao(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(ko)),Ao(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(ko)),Ao(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(ko)),Ao(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(ko)),Ao(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(ko)),Ao(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(ko)),Ao(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(ko)),Ao(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(ko)),Ao(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(ko)),Ao(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(ko)),Ao(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(ko)),Ao(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(ko)),Ao(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(ko)),Ao(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(ko)),Ao(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(ko)),Ao(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(ko)),Ao(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(ko)),Ao(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(ko)),Ao(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(ko)),Ao(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(ko)),Ao(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(ko)),Ao(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(ko)),rn(Se(300,.5,0),Se(-240,.5,1)),rn(Se(-100,.75,.35),Se(80,1.5,.8)),rn(Se(260,.75,.35),Se(80,1.5,.8)),Se(),Zt(),Math.PI,Math.PI;function So(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}So(ko("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),So(ko("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),So(ko("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),So(ko("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var Eo=1e-12,Uo=Math.PI,Po=2*Uo;function Do(t){this._context=t}Do.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Lo=function(t){return new Do(t)};Yo(Lo);function Ro(t){this._curve=t}function Yo(t){function e(e){return new Ro(t(e))}return e._curve=t,e}Ro.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var jo=Math.sin(Uo/10)/Math.sin(7*Uo/10),Fo=(Math.sin(Po/10),Math.cos(Po/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Oo(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function qo(t){this._context=t}qo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Oo(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Oo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Ho(t){this._context=t}Ho.prototype={areaStart:Fo,areaEnd:Fo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Oo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Xo(t){this._context=t}Xo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,i):this._context.moveTo(n,i);break;case 3:this._point=4;default:Oo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function zo(t,e){this._basis=new qo(t),this._beta=e}zo.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var i,r=t[0],a=e[0],f=t[n]-r,o=e[n]-a,c=-1;++c<=n;)i=c/n,this._basis.point(this._beta*t[c]+(1-this._beta)*(r+i*f),this._beta*e[c]+(1-this._beta)*(a+i*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new qo(t):new zo(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function Io(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function $o(t,e){this._context=t,this._k=(1-e)/6}$o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Io(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new $o(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Bo(t,e){this._context=t,this._k=(1-e)/6}Bo.prototype={areaStart:Fo,areaEnd:Fo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Bo(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Zo(t,e){this._context=t,this._k=(1-e)/6}Zo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Zo(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Wo(t,e,n){var i=t._x1,r=t._y1,a=t._x2,f=t._y2;if(t._l01_a>Eo){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,r=(r*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>Eo){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,u=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*s+t._x1*t._l23_2a-e*t._l12_2a)/u,f=(f*s+t._y1*t._l23_2a-n*t._l12_2a)/u}t._context.bezierCurveTo(i,r,a,f,t._x2,t._y2)}function Vo(t,e){this._context=t,this._alpha=e}Vo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Wo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Vo(t,e):new $o(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Jo(t,e){this._context=t,this._alpha=e}Jo.prototype={areaStart:Fo,areaEnd:Fo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Wo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Jo(t,e):new Bo(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Qo(t,e){this._context=t,this._alpha=e}Qo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Wo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Qo(t,e):new Zo(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Go(t){this._context=t}Go.prototype={areaStart:Fo,areaEnd:Fo,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function Ko(t){return t<0?-1:1}function tc(t,e,n){var i=t._x1-t._x0,r=e-t._x1,a=(t._y1-t._y0)/(i||r<0&&-0),f=(n-t._y1)/(r||i<0&&-0),o=(a*r+f*i)/(i+r);return(Ko(a)+Ko(f))*Math.min(Math.abs(a),Math.abs(f),.5*Math.abs(o))||0}function ec(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function nc(t,e,n){var i=t._x0,r=t._y0,a=t._x1,f=t._y1,o=(a-i)/3;t._context.bezierCurveTo(i+o,r+o*e,a-o,f-o*n,a,f)}function ic(t){this._context=t}function rc(t){this._context=new ac(t)}function ac(t){this._context=t}function fc(t){this._context=t}function oc(t){var e,n,i=t.length-1,r=new Array(i),a=new Array(i),f=new Array(i);for(r[0]=0,a[0]=2,f[0]=t[0]+2*t[1],e=1;e<i-1;++e)r[e]=1,a[e]=4,f[e]=4*t[e]+2*t[e+1];for(r[i-1]=2,a[i-1]=7,f[i-1]=8*t[i-1]+t[i],e=1;e<i;++e)n=r[e]/a[e-1],a[e]-=n,f[e]-=n*f[e-1];for(r[i-1]=f[i-1]/a[i-1],e=i-2;e>=0;--e)r[e]=(f[e]-r[e+1])/a[e];for(a[i-1]=(t[i]+r[i-1])/2,e=0;e<i-1;++e)a[e]=2*t[e+1]-r[e+1];return[r,a]}ic.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:nc(this,this._t0,ec(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,nc(this,ec(this,n=tc(this,t,e)),n);break;default:nc(this,this._t0,n=tc(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(rc.prototype=Object.create(ic.prototype)).point=function(t,e){ic.prototype.point.call(this,e,t)},ac.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,i,r,a){this._context.bezierCurveTo(e,t,i,n,a,r)}},fc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var i=oc(t),r=oc(e),a=0,f=1;f<n;++a,++f)this._context.bezierCurveTo(i[0][a],r[0][a],i[1][a],r[1][a],t[f],e[f]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function cc(t,e){this._context=t,this._t=e}cc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function sc(){this._=null}function uc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function hc(t,e){var n=e,i=e.R,r=n.U;r?r.L===n?r.L=i:r.R=i:t._=i,i.U=r,n.U=i,n.R=i.L,n.R&&(n.R.U=n),i.L=n}function lc(t,e){var n=e,i=e.L,r=n.U;r?r.L===n?r.L=i:r.R=i:t._=i,i.U=r,n.U=i,n.L=i.R,n.L&&(n.L.U=n),i.R=n}function dc(t){for(;t.L;)t=t.L;return t}sc.prototype={constructor:sc,insert:function(t,e){var n,i,r;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=dc(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(i=n.U).L?(r=i.R)&&r.C?(n.C=r.C=!1,i.C=!0,t=i):(t===n.R&&(hc(this,n),n=(t=n).U),n.C=!1,i.C=!0,lc(this,i)):(r=i.L)&&r.C?(n.C=r.C=!1,i.C=!0,t=i):(t===n.L&&(lc(this,n),n=(t=n).U),n.C=!1,i.C=!0,hc(this,i)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,i,r=t.U,a=t.L,f=t.R;if(n=a?f?dc(f):a:f,r?r.L===t?r.L=n:r.R=n:this._=n,a&&f?(i=n.C,n.C=t.C,n.L=a,a.U=n,n!==f?(r=n.U,n.U=t.U,t=n.R,r.L=t,n.R=f,f.U=n):(n.U=r,r=n,t=n.R)):(i=t.C,t=n),t&&(t.U=r),!i)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===r.L){if((e=r.R).C&&(e.C=!1,r.C=!0,hc(this,r),e=r.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,lc(this,e),e=r.R),e.C=r.C,r.C=e.R.C=!1,hc(this,r),t=this._;break}}else if((e=r.L).C&&(e.C=!1,r.C=!0,lc(this,r),e=r.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,hc(this,e),e=r.L),e.C=r.C,r.C=e.L.C=!1,lc(this,r),t=this._;break}e.C=!0,t=r,r=r.U}while(!t.C);t&&(t.C=!1)}}};var _c=sc;function bc(t,e,n,i){var r=[null,null],a=Oc.push(r)-1;return r.left=t,r.right=e,n&&yc(r,t,e,n),i&&yc(r,e,t,i),jc[t.index].halfedges.push(a),jc[e.index].halfedges.push(a),r}function pc(t,e,n){var i=[e,n];return i.left=t,i}function yc(t,e,n,i){t[0]||t[1]?t.left===n?t[1]=i:t[0]=i:(t[0]=i,t.left=e,t.right=n)}function vc(t,e,n,i,r){var a,f=t[0],o=t[1],c=f[0],s=f[1],u=0,h=1,l=o[0]-c,d=o[1]-s;if(a=e-c,l||!(a>0)){if(a/=l,l<0){if(a<u)return;a<h&&(h=a)}else if(l>0){if(a>h)return;a>u&&(u=a)}if(a=i-c,l||!(a<0)){if(a/=l,l<0){if(a>h)return;a>u&&(u=a)}else if(l>0){if(a<u)return;a<h&&(h=a)}if(a=n-s,d||!(a>0)){if(a/=d,d<0){if(a<u)return;a<h&&(h=a)}else if(d>0){if(a>h)return;a>u&&(u=a)}if(a=r-s,d||!(a<0)){if(a/=d,d<0){if(a>h)return;a>u&&(u=a)}else if(d>0){if(a<u)return;a<h&&(h=a)}return!(u>0||h<1)||(u>0&&(t[0]=[c+u*l,s+u*d]),h<1&&(t[1]=[c+h*l,s+h*d]),!0)}}}}}function gc(t,e,n,i,r){var a=t[1];if(a)return!0;var f,o,c=t[0],s=t.left,u=t.right,h=s[0],l=s[1],d=u[0],_=u[1],b=(h+d)/2,p=(l+_)/2;if(_===l){if(b<e||b>=i)return;if(h>d){if(c){if(c[1]>=r)return}else c=[b,n];a=[b,r]}else{if(c){if(c[1]<n)return}else c=[b,r];a=[b,n]}}else if(o=p-(f=(h-d)/(_-l))*b,f<-1||f>1)if(h>d){if(c){if(c[1]>=r)return}else c=[(n-o)/f,n];a=[(r-o)/f,r]}else{if(c){if(c[1]<n)return}else c=[(r-o)/f,r];a=[(n-o)/f,n]}else if(l<_){if(c){if(c[0]>=i)return}else c=[e,f*e+o];a=[i,f*i+o]}else{if(c){if(c[0]<e)return}else c=[i,f*i+o];a=[e,f*e+o]}return t[0]=c,t[1]=a,!0}function xc(t,e){var n=t.site,i=e.left,r=e.right;return n===r&&(r=i,i=n),r?Math.atan2(r[1]-i[1],r[0]-i[0]):(n===i?(i=e[1],r=e[0]):(i=e[0],r=e[1]),Math.atan2(i[0]-r[0],r[1]-i[1]))}function mc(t,e){return e[+(e.left!==t.site)]}function wc(t,e){return e[+(e.left===t.site)]}var Mc,Cc=[];function Nc(){uc(this),this.x=this.y=this.arc=this.site=this.cy=null}function Tc(t){var e=t.P,n=t.N;if(e&&n){var i=e.site,r=t.site,a=n.site;if(i!==a){var f=r[0],o=r[1],c=i[0]-f,s=i[1]-o,u=a[0]-f,h=a[1]-o,l=2*(c*h-s*u);if(!(l>=-Hc)){var d=c*c+s*s,_=u*u+h*h,b=(h*d-s*_)/l,p=(c*_-u*d)/l,y=Cc.pop()||new Nc;y.arc=t,y.site=r,y.x=b+f,y.y=(y.cy=p+o)+Math.sqrt(b*b+p*p),t.circle=y;for(var v=null,g=Fc._;g;)if(y.y<g.y||y.y===g.y&&y.x<=g.x){if(!g.L){v=g.P;break}g=g.L}else{if(!g.R){v=g;break}g=g.R}Fc.insert(v,y),v||(Mc=y)}}}}function kc(t){var e=t.circle;e&&(e.P||(Mc=e.N),Fc.remove(e),Cc.push(e),uc(e),t.circle=null)}var Ac=[];function Sc(){uc(this),this.edge=this.site=this.circle=null}function Ec(t){var e=Ac.pop()||new Sc;return e.site=t,e}function Uc(t){kc(t),Yc.remove(t),Ac.push(t),uc(t)}function Pc(t){var e=t.circle,n=e.x,i=e.cy,r=[n,i],a=t.P,f=t.N,o=[t];Uc(t);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<qc&&Math.abs(i-c.circle.cy)<qc;)a=c.P,o.unshift(c),Uc(c),c=a;o.unshift(c),kc(c);for(var s=f;s.circle&&Math.abs(n-s.circle.x)<qc&&Math.abs(i-s.circle.cy)<qc;)f=s.N,o.push(s),Uc(s),s=f;o.push(s),kc(s);var u,h=o.length;for(u=1;u<h;++u)s=o[u],c=o[u-1],yc(s.edge,c.site,s.site,r);c=o[0],(s=o[h-1]).edge=bc(c.site,s.site,null,r),Tc(c),Tc(s)}function Dc(t){for(var e,n,i,r,a=t[0],f=t[1],o=Yc._;o;)if((i=Lc(o,f)-a)>qc)o=o.L;else{if(!((r=a-Rc(o,f))>qc)){i>-qc?(e=o.P,n=o):r>-qc?(e=o,n=o.N):e=n=o;break}if(!o.R){e=o;break}o=o.R}!function(t){jc[t.index]={site:t,halfedges:[]}}(t);var c=Ec(t);if(Yc.insert(e,c),e||n){if(e===n)return kc(e),n=Ec(e.site),Yc.insert(c,n),c.edge=n.edge=bc(e.site,c.site),Tc(e),void Tc(n);if(n){kc(e),kc(n);var s=e.site,u=s[0],h=s[1],l=t[0]-u,d=t[1]-h,_=n.site,b=_[0]-u,p=_[1]-h,y=2*(l*p-d*b),v=l*l+d*d,g=b*b+p*p,x=[(p*v-d*g)/y+u,(l*g-b*v)/y+h];yc(n.edge,s,_,x),c.edge=bc(s,t,null,x),n.edge=bc(t,_,null,x),Tc(e),Tc(n)}else c.edge=bc(e.site,c.site)}}function Lc(t,e){var n=t.site,i=n[0],r=n[1],a=r-e;if(!a)return i;var f=t.P;if(!f)return-1/0;var o=(n=f.site)[0],c=n[1],s=c-e;if(!s)return o;var u=o-i,h=1/a-1/s,l=u/s;return h?(-l+Math.sqrt(l*l-2*h*(u*u/(-2*s)-c+s/2+r-a/2)))/h+i:(i+o)/2}function Rc(t,e){var n=t.N;if(n)return Lc(n,e);var i=t.site;return i[1]===e?i[0]:1/0}var Yc,jc,Fc,Oc,qc=1e-6,Hc=1e-12;function Xc(t,e){return e[1]-t[1]||e[0]-t[0]}function zc(t,e){var n,i,r,a=t.sort(Xc).pop();for(Oc=[],jc=new Array(t.length),Yc=new _c,Fc=new _c;;)if(r=Mc,a&&(!r||a[1]<r.y||a[1]===r.y&&a[0]<r.x))a[0]===n&&a[1]===i||(Dc(a),n=a[0],i=a[1]),a=t.pop();else{if(!r)break;Pc(r.arc)}if(function(){for(var t,e,n,i,r=0,a=jc.length;r<a;++r)if((t=jc[r])&&(i=(e=t.halfedges).length)){var f=new Array(i),o=new Array(i);for(n=0;n<i;++n)f[n]=n,o[n]=xc(t,Oc[e[n]]);for(f.sort(function(t,e){return o[e]-o[t]}),n=0;n<i;++n)o[n]=e[f[n]];for(n=0;n<i;++n)e[n]=o[n]}}(),e){var f=+e[0][0],o=+e[0][1],c=+e[1][0],s=+e[1][1];!function(t,e,n,i){for(var r,a=Oc.length;a--;)gc(r=Oc[a],t,e,n,i)&&vc(r,t,e,n,i)&&(Math.abs(r[0][0]-r[1][0])>qc||Math.abs(r[0][1]-r[1][1])>qc)||delete Oc[a]}(f,o,c,s),function(t,e,n,i){var r,a,f,o,c,s,u,h,l,d,_,b,p=jc.length,y=!0;for(r=0;r<p;++r)if(a=jc[r]){for(f=a.site,o=(c=a.halfedges).length;o--;)Oc[c[o]]||c.splice(o,1);for(o=0,s=c.length;o<s;)_=(d=wc(a,Oc[c[o]]))[0],b=d[1],h=(u=mc(a,Oc[c[++o%s]]))[0],l=u[1],(Math.abs(_-h)>qc||Math.abs(b-l)>qc)&&(c.splice(o,0,Oc.push(pc(f,d,Math.abs(_-t)<qc&&i-b>qc?[t,Math.abs(h-t)<qc?l:i]:Math.abs(b-i)<qc&&n-_>qc?[Math.abs(l-i)<qc?h:n,i]:Math.abs(_-n)<qc&&b-e>qc?[n,Math.abs(h-n)<qc?l:e]:Math.abs(b-e)<qc&&_-t>qc?[Math.abs(l-e)<qc?h:t,e]:null))-1),++s);s&&(y=!1)}if(y){var v,g,x,m=1/0;for(r=0,y=null;r<p;++r)(a=jc[r])&&(x=(v=(f=a.site)[0]-t)*v+(g=f[1]-e)*g)<m&&(m=x,y=a);if(y){var w=[t,e],M=[t,i],C=[n,i],N=[n,e];y.halfedges.push(Oc.push(pc(f=y.site,w,M))-1,Oc.push(pc(f,M,C))-1,Oc.push(pc(f,C,N))-1,Oc.push(pc(f,N,w))-1)}}for(r=0;r<p;++r)(a=jc[r])&&(a.halfedges.length||delete jc[r])}(f,o,c,s)}this.edges=Oc,this.cells=jc,Yc=Fc=Oc=jc=null}zc.prototype={constructor:zc,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return mc(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,i){if(a=(r=n.halfedges).length)for(var r,a,f,o,c,s,u=n.site,h=-1,l=e[r[a-1]],d=l.left===u?l.right:l.left;++h<a;)f=d,d=(l=e[r[h]]).left===u?l.right:l.left,f&&d&&i<f.index&&i<d.index&&(c=f,s=d,((o=u)[0]-s[0])*(c[1]-o[1])-(o[0]-c[0])*(s[1]-o[1])<0)&&t.push([u.data,f.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var i,r,a=this,f=a._found||0,o=a.cells.length;!(r=a.cells[f]);)if(++f>=o)return null;var c=t-r.site[0],s=e-r.site[1],u=c*c+s*s;do{r=a.cells[i=f],f=null,r.halfedges.forEach(function(n){var i=a.edges[n],o=i.left;if(o!==r.site&&o||(o=i.right)){var c=t-o[0],s=e-o[1],h=c*c+s*s;h<u&&(u=h,f=o.index)}})}while(null!==f);return a._found=i,null==n||u<=n*n?r.site:null}};function Ic(t,e,n){this.k=t,this.x=e,this.y=n}Ic.prototype={constructor:Ic,scale:function(t){return 1===t?this:new Ic(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Ic(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Ic(1,0,0);Ic.prototype;for(var $c=wt("svg"),Bc=360,Zc=Math.floor(720/Bc),Wc=[0,1,2,3,4,5,6],Vc=["red","orange","yellow","green","blue","pink","purple"],Jc=[fs(30),fs(60),fs(120),fs(180),fs(240),fs(300),fs(360)],Qc=[],Gc=0;Gc<Wc.length;Gc++)for(var Kc=0;Kc<Wc.length;Kc++)Qc.push({idX:Gc,idY:Kc,trail:new Array(Bc)});var ts,es,ns=(ts=0,function(){return++ts});function is(t){var e=$c.selectAll("g."+t).data(Wc),n=e.enter().append("g").attr("class",t),i=e;return{newOuterCircles:n.append("circle").attr("class",function(t,e){return"outer-circle stroke-"+Vc[e]}),updatedOuterCircles:i.selectAll("circle.outer-circle"),newDotCircles:n.append("circle").attr("class","dot-circle"),updatedDotCircles:i.selectAll("circle.dot-circle")}}function rs(t,e){var n,i=2*t.circleRadiusWithoutStroke+t.circleMargin,r=t.circleRadiusWithoutStroke+t.circleMargin;return((n={})[es.horizontal]={outerCircleX:function(t){return i*(t+1)+r},outerCircleY:a,dotCircleX:function(e){return i*(e+1)+r+as(t.timestamp,e,t.circleRadiusWithoutStroke).xOffset},dotCircleY:function(e){return a()+as(t.timestamp,e,t.circleRadiusWithoutStroke).yOffset}},n[es.vertical]={outerCircleX:f,outerCircleY:function(t){return i*(t+1)+r},dotCircleX:function(e){return f()+as(t.timestamp,e,t.circleRadiusWithoutStroke).xOffset},dotCircleY:function(e){return i*(e+1)+r+as(t.timestamp,e,t.circleRadiusWithoutStroke).yOffset}},n)[e];function a(){return r}function f(){return r}}function as(t,e,n){var i=function(t,e){return t*Jc[e]}(t,e)*Math.PI/180;return{xOffset:Math.cos(i)*n,yOffset:Math.sin(i)*n}}function fs(t){return t/60}function os(t){var e=t.trail.filter(function(t){return void 0!==t});if(!(e.length<2)){var n=e[0],i=e.slice(1);return"M "+n.x+","+n.y+" "+i.map(function(t){return"L "+t.x+","+t.y}).join(" ")}}!function(t){t.horizontal="horizontal",t.vertical="vertical"}(es||(es={})),window.requestAnimationFrame(function t(){!function(t){$c.attr("preserveAspectRatio","xMidYMid meet").attr("viewBox","0 0 890 890").attr("width",window.innerWidth).attr("height",window.innerHeight);for(var e=t.circleRadiusWithoutStroke-t.circleStroke/2,n=[es.vertical,es.horizontal],i=0,r=n;i<r.length;i++){var a=r[i],f=is(a),o=rs(t,a);f.newOuterCircles.attr("r",e).attr("cx",o.outerCircleX).attr("cy",o.outerCircleY),f.updatedOuterCircles.attr("r",e).attr("cx",o.outerCircleX).attr("cy",o.outerCircleY),f.newDotCircles.attr("r",t.dotRadius).attr("cx",o.dotCircleX).attr("cy",o.dotCircleY),f.updatedDotCircles.attr("r",t.dotRadius).attr("cx",o.dotCircleX).attr("cy",o.dotCircleY)}var c=function(){var t=$c.selectAll("g.curve").data(Qc),e=t.enter().append("g").attr("class","curve"),n=t,i=e.append("path").attr("class",function(t){return"lissajous-curve stroke-"+Vc[Math.max(t.idX,t.idY)%Vc.length]}),r=e.append("circle").attr("class","dot-circle"),a=t.selectAll("path.lissajous-curve"),f=n.selectAll("circle.dot-circle");return{newPaths:i,updatedPaths:a,newDotCircles:r,updatedDotCircles:f}}(),s=c.newPaths,u=c.updatedPaths,h=c.newDotCircles,l=c.updatedDotCircles,d=rs(t,es.vertical),_=rs(t,es.horizontal);if(t.timestamp%Zc==0)for(var b=0;b<Wc.length;b++)for(var p=0;p<Wc.length;p++)Qc[b*Wc.length+p].trail[Math.floor(t.timestamp/Zc)%Bc]={x:_.dotCircleX(b),y:d.dotCircleY(p)};s.attr("d",os),u.attr("d",os),h.attr("r",t.dotRadius).attr("cx",function(t){return _.dotCircleX(t.idX)}).attr("cy",function(t){return d.dotCircleY(t.idY)}),l.attr("r",t.dotRadius).attr("cx",function(t){return _.dotCircleX(t.idX)}).attr("cy",function(t){return d.dotCircleY(t.idY)})}({timestamp:ns(),circleRadiusWithoutStroke:50,circleMargin:10,circleStroke:2,dotRadius:4}),window.requestAnimationFrame(t)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,